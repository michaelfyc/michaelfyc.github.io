{"title":"Funny Features of JavaScript(1)","date":"2020-02-26T08:04:09.000Z","date_formatted":{"ll":"Feb 26, 2020","L":"02/26/2020","MM-DD":"02-26"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/02/23/539f089ffe02b.jpg?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/02/26/Funny-Features-of-JavaScript-1","tags":["JavaScript"],"updated":"2020-02-26T08:04:09.905Z","content":"<p>JavaScript is notorious for its funny and puzzling feature. You can find people complaining and making fun of it almost everywhere. Here’s an example. </p>\n<p><img src=\"https://img.cdn.n3ko.co/lsky/2020/02/23/eb55435d0f5e3.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp\" class=\"φcy\" alt=\"javascript_sucks\"></p>\n<p>Why the result ended like this? Let’s go through them one by one.</p>\n<h3 id=\"typeof-nan\">typeof NaN<a href=\"#typeof-nan\" title=\"typeof NaN\"></a></h3><p><code>NaN</code> means “Not a Number”, then why <code>typeof NaN</code> is number?  Well, this is not an exclusive feature of JavaScript. This is the answer on stackoverflow:</p>\n<blockquote>\n<p>Well, <code>NaN</code> is still a numeric <em>type</em>, despite the fact it actually stands for Not-A-Number :-)</p>\n<p><code>NaN</code> just means the specific value cannot be represented within the limitations of the numeric type (although that could be said for all numbers that have to be rounded to fit, but <code>NaN</code> is a special case).</p>\n<p>A specific <code>NaN</code> is not considered equal to another <code>NaN</code> because they may be different values. However, <code>NaN</code> is still a number type, just like 2718 or 31415.</p>\n</blockquote>\n<p>Similarly, <code>typeof(null)</code> is <code>object</code>. And the reason?</p>\n<blockquote>\n<p>In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. <code>null</code> was represented as the NULL pointer (0x00 in most platforms). Consequently, null had 0 as type tag, hence the “object” <code>typeof</code> return value.</p>\n<p>A fix was proposed for ECMAScript (via an opt-in), but was rejected. It would have resulted in <code>typeof null === &#39;null&#39;</code>.</p>\n</blockquote>\n<p>Maybe we should be happy because at least <code>typeof(undefined)</code> is <code>undefined</code>, LOL.</p>\n<h3 id=\"9999999999999999-ends-up-in-10000000000000000\">9999999999999999 ends up in 10000000000000000<a href=\"#9999999999999999-ends-up-in-10000000000000000\" title=\"9999999999999999 ends up in 10000000000000000\"></a></h3><p>In JavaScript, <code>Number.MAX_VALUE</code> is 2 to the power of 53,or 9007199254740992. Any number greater than the MAX_VALUE has the risk of losing accuracy. That’s why 16-digit nine ends up in 10 thousand trillion.</p>\n<h3 id=\"050106--but-010203\">0.5+0.1==0.6  but 0.1+0.2!=0.3?<a href=\"#050106--but-010203\" title=\"0.5+0.1==0.6  but 0.1+0.2!=0.3?\"></a></h3><p>This is not JavaScript-only. As we know, computer stored data in binary. Decimal integers can be easily transferred to binary, but problems pop out when transferring decimal fraction. (0.1)<sub>10</sub> in binary is infinite digits. While computer has limited storage, greater digits are discarded, causing <code>accuracy lost</code>. So is 0.2. Two numbers with accuracy lost produces the curious result. On the other hand, numbers like 0.5, 0.25, can be represented in binary with limited digits, and thus undergo no accuracy lost. That’s why 0.5+0.1 is still 0.6. </p>\n<p>In fact, 0.1+0.2==0.30000000000000004.</p>\n  <img src=\"https://img.cdn.n3ko.co/lsky/2020/02/23/277dd06fc9bc5.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp\" alt=\"Float-Number-Humor.png\" style=\"zoom:50%;\" />\n\n\n\n<p>Fun fact: Python seems to be an exception. If you try to run 0.1+0.2, you will get precisely 0.3.</p>\n","next":{"title":"Null,NaN and Infinity","link":"2020/02/25/Null-NaN-and-Infinity"},"plink":"http://yoursite.com/2020/02/26/Funny-Features-of-JavaScript-1/","toc":[{"id":"typeof-nan","title":"typeof NaN","index":"1"},{"id":"9999999999999999-ends-up-in-10000000000000000","title":"9999999999999999 ends up in 10000000000000000","index":"2"},{"id":"050106--but-010203","title":"0.5+0.1&#x3D;&#x3D;0.6  but 0.1+0.2!&#x3D;0.3?","index":"3"}]}