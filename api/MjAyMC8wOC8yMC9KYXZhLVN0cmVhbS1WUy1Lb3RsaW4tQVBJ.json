{"title":"Java Stream VS Kotlin API","date":"2020-08-20T04:58:06.000Z","date_formatted":{"ll":"Aug 20, 2020","L":"08/20/2020","MM-DD":"08-20"},"link":"2020/08/20/Java-Stream-VS-Kotlin-API","comments":true,"tags":["Java","Kotlin","Stream"],"categories":["Programming"],"updated":"2020-08-20T04:58:06.046Z","content":"<h2 id=\"java-stream-example\">Java Stream Example<a href=\"#java-stream-example\" title=\"Java Stream Example\"></a></h2><p>Real-life scenario:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Gender gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Department department;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">enum</span> Gender&#123;</span><br><span class=\"line\">        MALE,FEMALE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Getters, Setters and Constructor, toString...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String departmentId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String departmentName;</span><br><span class=\"line\">    <span class=\"comment\">//Getters, Setters and Constructor,toString, equals and hashcode ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Provided that we have a list of employees sent from front-end. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> Employee(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"John\"</span>,<span class=\"number\">18</span>,MALE,<span class=\"number\">6000</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Department(<span class=\"string\">\"d1\"</span>,<span class=\"string\">\"Human Resource\"</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"Michelle\"</span>,<span class=\"number\">21</span>, FEMALE,<span class=\"number\">8000</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Department(<span class=\"string\">\"d2\"</span>,<span class=\"string\">\"Public Resource\"</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"Alice\"</span>,<span class=\"number\">24</span>,FEMALE,<span class=\"number\">7500</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Department(<span class=\"string\">\"d3\"</span>,<span class=\"string\">\"Finance\"</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">null</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"7\"</span>,<span class=\"string\">\"Dean\"</span>,<span class=\"number\">27</span>,MALE,<span class=\"number\">300</span>, <span class=\"keyword\">null</span>),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Bob\"</span>,<span class=\"number\">34</span>,MALE,<span class=\"number\">12000</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Department(<span class=\"string\">\"d1\"</span>,<span class=\"string\">\"Human Resource\"</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"Ashley\"</span>,<span class=\"number\">27</span>,FEMALE,<span class=\"number\">10000</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Department(<span class=\"string\">\"d4\"</span>,<span class=\"string\">\"Administration\"</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"Peter\"</span>,<span class=\"number\">33</span>,MALE,<span class=\"number\">12500</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Department(<span class=\"string\">\"d2\"</span>,<span class=\"string\">\"Public Resource\"</span>))</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>For latter demonstration, I deliberately add null element and null properties into the list.</p>\n<p>It would be better to see the elements of the list by printing them out:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">employees.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">--- Result</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'5'</span>, name=<span class=\"string\">'John'</span>, age=<span class=\"number\">18</span>, gender=MALE, salary=<span class=\"number\">6000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'2'</span>, name=<span class=\"string\">'Michelle'</span>, age=<span class=\"number\">21</span>, gender=FEMALE, salary=<span class=\"number\">8000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'4'</span>, name=<span class=\"string\">'Alice'</span>, age=<span class=\"number\">24</span>, gender=FEMALE, salary=<span class=\"number\">7500.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d3'</span>, departmentName=<span class=\"string\">'Finance'</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'7'</span>, name=<span class=\"string\">'Dean'</span>, age=<span class=\"number\">27</span>, gender=MALE, salary=<span class=\"number\">300.0</span>, department=<span class=\"keyword\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'3'</span>, name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">34</span>, gender=MALE, salary=<span class=\"number\">12000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'6'</span>, name=<span class=\"string\">'Ashley'</span>, age=<span class=\"number\">33</span>, gender=FEMALE, salary=<span class=\"number\">10000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d4'</span>, departmentName=<span class=\"string\">'Administration'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'1'</span>, name=<span class=\"string\">'Peter'</span>, age=<span class=\"number\">27</span>, gender=MALE, salary=<span class=\"number\">12500.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fetch-a-list-of-female-employees\">Fetch a list of female employees<a href=\"#fetch-a-list-of-female-employees\" title=\"Fetch a list of female employees\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; femaleEmployees = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(employee-&gt;employee.getGender().equals(FEMALE))</span><br><span class=\"line\">    .collect(Collectors.toList());</span><br><span class=\"line\">e.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>An <code>NullPointerExeption</code> may be thrown if you run the code, since I’ve add a null element.</p>\n<p>Therefore pre-processing is important:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; femaleEmployees = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .filter(employee-&gt;employee.getGender().equals(FEMALE))</span><br><span class=\"line\">    .collect(Collectors.toList());</span><br><span class=\"line\">e.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>And the result:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;id=<span class=\"string\">'2'</span>, name=<span class=\"string\">'Michelle'</span>, age=<span class=\"number\">21</span>, gender=FEMALE, salary=<span class=\"number\">8000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'4'</span>, name=<span class=\"string\">'Alice'</span>, age=<span class=\"number\">24</span>, gender=FEMALE, salary=<span class=\"number\">7500.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d3'</span>, departmentName=<span class=\"string\">'Finance'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'6'</span>, name=<span class=\"string\">'Ashley'</span>, age=<span class=\"number\">33</span>, gender=FEMALE, salary=<span class=\"number\">10000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d4'</span>, departmentName=<span class=\"string\">'Administration'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"get-the-set-of-all-employees-department\">Get the set of all employees department<a href=\"#get-the-set-of-all-employees-department\" title=\"Get the set of all employees department\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;Department&gt; departments = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .filter(employee-&gt;employee.getDepartment()!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    .map(Employee::getDepartment)</span><br><span class=\"line\">    .collect(Collectors.toSet());</span><br><span class=\"line\">e.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Department&#123;departmentId=<span class=\"string\">'d4'</span>, departmentName=<span class=\"string\">'Administration'</span>&#125;</span><br><span class=\"line\">Department&#123;departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>&#125;</span><br><span class=\"line\">Department&#123;departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>&#125;</span><br><span class=\"line\">Department&#123;departmentId=<span class=\"string\">'d3'</span>, departmentName=<span class=\"string\">'Finance'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//Note that if you don't override equals and hashcode, you shall find duplicate element here</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"accumulate-total-salary-of-a-particular-department\">Accumulate total salary of a particular department<a href=\"#accumulate-total-salary-of-a-particular-department\" title=\"Accumulate total salary of a particular department\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> averageSalaryOfHR = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .filter(employee-&gt;employee.getDepartment()!=<span class=\"keyword\">null</span> &amp;&amp; <span class=\"string\">\"d1\"</span>.equals(employee.getDepartment().getDeparmentId()))</span><br><span class=\"line\">    .sum();</span><br><span class=\"line\">System.out.println(averageSalaryOfHR);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result:</span><br><span class=\"line\">18000.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"return-a-string-concatenating-all-employees-above-by-comma-and-in-reverse-alphabetic-order\">Return a string concatenating all employees above by comma and in reverse alphabetic order<a href=\"#return-a-string-concatenating-all-employees-above-by-comma-and-in-reverse-alphabetic-order\" title=\"Return a string concatenating all employees above by comma and in reverse alphabetic order\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String message  = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Obejcts::nonNull)</span><br><span class=\"line\">    .map(Employee::getName)</span><br><span class=\"line\">    .sorted(Collections.reverseOrder(String::compareToIgnoreCase))</span><br><span class=\"line\">    .collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">System.out.println(message);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Peter,Michelle,John,Dean,Bob,Ashley,Alice</span><br></pre></td></tr></table></figure>\n\n<p>Note that <code>compareToIgnoreCase</code> is necessary, because in natural alphabetic orders, uppercase alphabet is superior to lowercases.</p>\n<h3 id=\"find-out-the-eldest-employee\">Find out the eldest employee<a href=\"#find-out-the-eldest-employee\" title=\"Find out the eldest employee\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee employee =  employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .max(Comparable.comparing(Employee::getAge))</span><br><span class=\"line\">    .get();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result:</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'3'</span>, name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">34</span>, gender=MALE, salary=<span class=\"number\">12000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"return-a-list-of-male-employees-sorted-by-ageasc-then-by-salarydesc\">Return a list of male employees sorted by Age(asc) then by salary(desc)<a href=\"#return-a-list-of-male-employees-sorted-by-ageasc-then-by-salarydesc\" title=\"Return a list of male employees sorted by Age(asc) then by salary(desc)\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; e = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .filter(employee-&gt;employee.getGender().equals(MALE))</span><br><span class=\"line\">    .sorted(Comparator.comparing(Employee::getAge)</span><br><span class=\"line\">           .thenComparing(Employee::getSalary).reversed()</span><br><span class=\"line\">           )</span><br><span class=\"line\">    .collect(Collectors.toList());</span><br><span class=\"line\">e.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result:</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'3'</span>, name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">34</span>, gender=MALE, salary=<span class=\"number\">12000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'1'</span>, name=<span class=\"string\">'Peter'</span>, age=<span class=\"number\">27</span>, gender=MALE, salary=<span class=\"number\">12500.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>&#125;&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'7'</span>, name=<span class=\"string\">'Dean'</span>, age=<span class=\"number\">27</span>, gender=MALE, salary=<span class=\"number\">300.0</span>, department=<span class=\"keyword\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;id=<span class=\"string\">'5'</span>, name=<span class=\"string\">'John'</span>, age=<span class=\"number\">18</span>, gender=MALE, salary=<span class=\"number\">6000.0</span>, department=Department&#123;departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"compute-sum-of-salaries-by-department-name\">Compute sum of salaries by department name<a href=\"#compute-sum-of-salaries-by-department-name\" title=\"Compute sum of salaries by department name\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Double&gt; total = employees</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .filter(employee-&gt;employee.getDepartment()!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    .collect(Collectors.groupingBy(</span><br><span class=\"line\">    \temployee-&gt;employee.getDepartment().getDepartmentName(),</span><br><span class=\"line\">        Collectors.summingDouble(Employee::getSalary)</span><br><span class=\"line\">    ));</span><br><span class=\"line\">System.out.println(total);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result:</span><br><span class=\"line\">&#123;Administration=<span class=\"number\">10000.0</span>, Human Resource=<span class=\"number\">18000.0</span>, Public Resource=<span class=\"number\">20500.0</span>, Finance=<span class=\"number\">7500.0</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"compute-average-salaries-by-department-name-and-sort-by-average-salaryasc\">Compute average salaries by department name and sort by average salary(asc)<a href=\"#compute-average-salaries-by-department-name-and-sort-by-average-salaryasc\" title=\"Compute average salaries by department name and sort by average salary(asc)\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkedHashMap&lt;String,Double&gt; employeeSalaryMap = employees</span><br><span class=\"line\">     .stream()</span><br><span class=\"line\">    .filter(Objects::nonNull)</span><br><span class=\"line\">    .filter(employee-&gt;employee.getDepartment()!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    .collect(Collectors.groupingBy(</span><br><span class=\"line\">    \temployee-&gt;employee.getDepartment().getDepartmentName(),</span><br><span class=\"line\">        LinkedHashMap::<span class=\"keyword\">new</span>,</span><br><span class=\"line\">        Collectors.averagingDouble(Employee::getSalary)</span><br><span class=\"line\">    ));</span><br><span class=\"line\">LinkedHashMap&lt;String,Double&gt; average = employeeSalaryMap</span><br><span class=\"line\">    .entrySet()</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .sorted(Map.Entry.comparingByValue())</span><br><span class=\"line\">    .collect(Collectors.toMap(</span><br><span class=\"line\">    \tMap.Entry::getKey, Map.Entry::getValue,(x,y)-&gt;y, LinkedHashMap::<span class=\"keyword\">new</span></span><br><span class=\"line\">    ));</span><br><span class=\"line\">System.out.println(average);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result:</span><br><span class=\"line\">&#123;Finance=<span class=\"number\">7500.0</span>, Human Resource=<span class=\"number\">9000.0</span>, Administration=<span class=\"number\">10000.0</span>, Public Resource=<span class=\"number\">10250.0</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Based on the instances listed above, it’s easy to discover that filtering null values is an indispensable step. Next, let’s see how Kotlin, who boasts of its null safety and handy functional API performs.</p>\n<h2 id=\"kotlin-api-example\">Kotlin API Example<a href=\"#kotlin-api-example\" title=\"Kotlin API Example\"></a></h2><p>We can see that classes are much less cumbersome than Java simply in class creating.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span>(<span class=\"keyword\">var</span> id:String, <span class=\"keyword\">var</span> name:String, <span class=\"keyword\">var</span> age:<span class=\"built_in\">Int</span>, <span class=\"keyword\">var</span> gender:Gender, <span class=\"keyword\">var</span> salary:<span class=\"built_in\">Double</span>, <span class=\"keyword\">var</span> department:Department) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gender</span></span>&#123;</span><br><span class=\"line\">        MALE,FEMALE</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toString</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Employee(id='<span class=\"variable\">$id</span>', name='<span class=\"variable\">$name</span>', age=<span class=\"variable\">$age</span>, gender=<span class=\"variable\">$gender</span>, salary=<span class=\"variable\">$salary</span>, department=<span class=\"variable\">$department</span>)\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span></span>(<span class=\"keyword\">var</span> departmentId: String, <span class=\"keyword\">var</span> departmentName:String) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toString</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Department(departmentId='<span class=\"variable\">$departmentId</span>', departmentName='<span class=\"variable\">$departmentName</span>')\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> employees: List&lt;Employee&gt; = listOf(</span><br><span class=\"line\">        Employee(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"John\"</span>,<span class=\"number\">18</span>, Employee.Gender.MALE,<span class=\"number\">6000.0</span>, Department(<span class=\"string\">\"d1\"</span>,<span class=\"string\">\"Human Resource\"</span>)),</span><br><span class=\"line\">        Employee(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"Michelle\"</span>,<span class=\"number\">21</span>, Employee.Gender.FEMALE,<span class=\"number\">8000.0</span>, Department(<span class=\"string\">\"d2\"</span>,<span class=\"string\">\"Public Resource\"</span>)),</span><br><span class=\"line\">        Employee(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"Alice\"</span>,<span class=\"number\">24</span>, Employee.Gender.FEMALE,<span class=\"number\">7500.0</span>, Department(<span class=\"string\">\"d3\"</span>,<span class=\"string\">\"Finance\"</span>)),</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        Employee(<span class=\"string\">\"7\"</span>,<span class=\"string\">\"Dean\"</span>,<span class=\"number\">27</span>, Employee.Gender.MALE,<span class=\"number\">300.0</span>, <span class=\"literal\">null</span>),</span><br><span class=\"line\">        Employee(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Bob\"</span>,<span class=\"number\">34</span>, Employee.Gender.MALE,<span class=\"number\">12000.0</span>, Department(<span class=\"string\">\"d1\"</span>,<span class=\"string\">\"Human Resource\"</span>)),</span><br><span class=\"line\">        Employee(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"Ashley\"</span>,<span class=\"number\">27</span>, Employee.Gender.FEMALE,<span class=\"number\">10000.0</span>, Department(<span class=\"string\">\"d4\"</span>,<span class=\"string\">\"Administration\"</span>)),</span><br><span class=\"line\">        Employee(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"Peter\"</span>,<span class=\"number\">33</span>, Employee.Gender.MALE,<span class=\"number\">12500.0</span>, Department(<span class=\"string\">\"d2\"</span>,<span class=\"string\">\"Public Resource\"</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\">    employees.forEach(::println)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> Complier should actively reminds you that there are null values in both the list and employee’s attribute. This is an alarm mechanism from Kotlin, avoiding many unnecessary <code>NullPointerException</code>. However, in real-life scenario, the list may comes from front-end, and hence may be null(This should really blame the front-end programmer for not filtering undefined values.). Thus, we need to adjust our codes a little bit to improve our fault-tolerance, and we can do this by adding barely two question marks. </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span>(... <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> department: Department?)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> employees:List&lt;Employee?&gt; = ...</span><br></pre></td></tr></table></figure>\n\n<p>Now we can print out all the elements.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">employees.forEach(::println)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Result:</span><br><span class=\"line\">Employee(id=<span class=\"string\">'5'</span>, name=<span class=\"string\">'John'</span>, age=<span class=\"number\">18</span>, gender=MALE, salary=<span class=\"number\">6000.0</span>, department=Department(departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>))</span><br><span class=\"line\">Employee(id=<span class=\"string\">'2'</span>, name=<span class=\"string\">'Michelle'</span>, age=<span class=\"number\">21</span>, gender=FEMALE, salary=<span class=\"number\">8000.0</span>, department=Department(departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>))</span><br><span class=\"line\">Employee(id=<span class=\"string\">'4'</span>, name=<span class=\"string\">'Alice'</span>, age=<span class=\"number\">24</span>, gender=FEMALE, salary=<span class=\"number\">7500.0</span>, department=Department(departmentId=<span class=\"string\">'d3'</span>, departmentName=<span class=\"string\">'Finance'</span>))</span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">Employee(id=<span class=\"string\">'7'</span>, name=<span class=\"string\">'Dean'</span>, age=<span class=\"number\">27</span>, gender=MALE, salary=<span class=\"number\">300.0</span>, department=<span class=\"literal\">null</span>)</span><br><span class=\"line\">Employee(id=<span class=\"string\">'3'</span>, name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">34</span>, gender=MALE, salary=<span class=\"number\">12000.0</span>, department=Department(departmentId=<span class=\"string\">'d1'</span>, departmentName=<span class=\"string\">'Human Resource'</span>))</span><br><span class=\"line\">Employee(id=<span class=\"string\">'6'</span>, name=<span class=\"string\">'Ashley'</span>, age=<span class=\"number\">27</span>, gender=FEMALE, salary=<span class=\"number\">10000.0</span>, department=Department(departmentId=<span class=\"string\">'d4'</span>, departmentName=<span class=\"string\">'Administration'</span>))</span><br><span class=\"line\">Employee(id=<span class=\"string\">'1'</span>, name=<span class=\"string\">'Peter'</span>, age=<span class=\"number\">33</span>, gender=MALE, salary=<span class=\"number\">12500.0</span>, department=Department(departmentId=<span class=\"string\">'d2'</span>, departmentName=<span class=\"string\">'Public Resource'</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fetch-a-list-of-female-employees-1\">Fetch a list of female employees<a href=\"#fetch-a-list-of-female-employees-1\" title=\"Fetch a list of female employees\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">\t.filterNotNull()</span><br><span class=\"line\">\t.filter &#123; employee -&gt; employee.gender == Employee.Gender.FEMALE &#125;</span><br><span class=\"line\">result.forEach(::println)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"get-the-set-of-all-employees-department-1\">Get the set of all employees department<a href=\"#get-the-set-of-all-employees-department-1\" title=\"Get the set of all employees department\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">\t.filterNotNull()</span><br><span class=\"line\">\t.map(Employee::department)</span><br><span class=\"line\">\t.filterNotNull()</span><br><span class=\"line\">\t.toHashSet()</span><br><span class=\"line\">result.forEach(::println)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"accumulate-total-salary-of-a-particular-department-1\">Accumulate total salary of a particular department<a href=\"#accumulate-total-salary-of-a-particular-department-1\" title=\"Accumulate total salary of a particular department\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">\t.filterNotNull()</span><br><span class=\"line\">\t.filter &#123;employee -&gt;employee.department!=<span class=\"literal\">null</span> &amp;&amp; employee.department!!.departmentId==<span class=\"string\">\"d1\"</span>&#125;.map(Employee::salary)</span><br><span class=\"line\">\t.sum()</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"return-a-string-concatenating-all-employees-above-by-comma-and-in-reverse-alphabetic-order-1\">Return a string concatenating all employees above by comma and in reverse alphabetic order<a href=\"#return-a-string-concatenating-all-employees-above-by-comma-and-in-reverse-alphabetic-order-1\" title=\"Return a string concatenating all employees above by comma and in reverse alphabetic order\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">\t.filterNotNull()</span><br><span class=\"line\">\t.map(Employee::name)</span><br><span class=\"line\">\t.sortedByDescending &#123; it.toLowerCase() &#125;</span><br><span class=\"line\">\t.joinToString(<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure>\n\n<p><code>toLowerCase()</code> is used to make sorting case-insensitive</p>\n<h3 id=\"find-out-the-eldest-employee-1\">Find out the eldest employee<a href=\"#find-out-the-eldest-employee-1\" title=\"Find out the eldest employee\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees.</span><br><span class=\"line\">    filterNotNull().</span><br><span class=\"line\">    maxBy &#123; employee -&gt; employee.age &#125;</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"return-a-list-of-male-employees-sorted-by-ageasc-then-by-salarydesc-1\">Return a list of male employees sorted by Age(asc) then by salary(desc)<a href=\"#return-a-list-of-male-employees-sorted-by-ageasc-then-by-salarydesc-1\" title=\"Return a list of male employees sorted by Age(asc) then by salary(desc)\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">        .filterNotNull()</span><br><span class=\"line\">        .filter &#123; employee -&gt; employee.gender==Employee.Gender.MALE &#125;</span><br><span class=\"line\">        .sortedWith(compareBy&lt;Employee&gt;&#123; it.age &#125;.thenByDescending&#123;it.salary&#125;)</span><br><span class=\"line\">result.forEach(::println)</span><br></pre></td></tr></table></figure>\n\n<p><code>compareBy</code> must declare the type or compiler will not know the properties like age and salary.</p>\n<h3 id=\"compute-sum-of-salaries-by-department-name-1\">Compute sum of salaries by department name<a href=\"#compute-sum-of-salaries-by-department-name-1\" title=\"Compute sum of salaries by department name\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">        .filterNotNull()</span><br><span class=\"line\">        .filter &#123; employee -&gt; employee.department!=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">        .groupBy &#123; it.department!!.departmentName &#125;</span><br><span class=\"line\">        .mapValues &#123; entry -&gt; entry.value.map &#123; it.salary &#125;.sum() &#125;</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"compute-average-salaries-by-department-name-and-sort-by-average-salaryasc-1\">Compute average salaries by department name and sort by average salary(asc)<a href=\"#compute-average-salaries-by-department-name-and-sort-by-average-salaryasc-1\" title=\"Compute average salaries by department name and sort by average salary(asc)\"></a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = employees</span><br><span class=\"line\">        .filterNotNull()</span><br><span class=\"line\">        .filter &#123; employee -&gt; employee.department!=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">        .groupBy &#123; it.department!!.departmentName &#125;</span><br><span class=\"line\">        .mapValues &#123; entry -&gt; entry.value.map &#123; it.salary &#125;.average() &#125;</span><br><span class=\"line\">        .toList()</span><br><span class=\"line\">        .sortedBy &#123; (_, value) -&gt; value &#125;</span><br><span class=\"line\">        .toMap()</span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure>\n\n<p>There is no doubt that Kotlin way of processing is more elegant, readable, and safer. One reason is <code>collect</code>in Java Stream is a terminal method but Kotlin doesn’t have any limits like this(nor does Kotlin use <code>stream</code>)</p>\n","next":{"title":"MyBatis Java Annotation Dealing with Complicated Objects","link":"2020/08/01/MyBatis-Java-Annotation"},"plink":"https://git.michaelsblog.top/2020/08/20/Java-Stream-VS-Kotlin-API/","toc":[{"id":"java-stream-example","title":"Java Stream Example","index":"1","children":[{"id":"fetch-a-list-of-female-employees","title":"Fetch a list of female employees","index":"1.1"},{"id":"get-the-set-of-all-employees-department","title":"Get the set of all employees department","index":"1.2"},{"id":"accumulate-total-salary-of-a-particular-department","title":"Accumulate total salary of a particular department","index":"1.3"},{"id":"return-a-string-concatenating-all-employees-above-by-comma-and-in-reverse-alphabetic-order","title":"Return a string concatenating all employees above by comma and in reverse alphabetic order","index":"1.4"},{"id":"find-out-the-eldest-employee","title":"Find out the eldest employee","index":"1.5"},{"id":"return-a-list-of-male-employees-sorted-by-ageasc-then-by-salarydesc","title":"Return a list of male employees sorted by Age(asc) then by salary(desc)","index":"1.6"},{"id":"compute-sum-of-salaries-by-department-name","title":"Compute sum of salaries by department name","index":"1.7"},{"id":"compute-average-salaries-by-department-name-and-sort-by-average-salaryasc","title":"Compute average salaries by department name and sort by average salary(asc)","index":"1.8"}]},{"id":"kotlin-api-example","title":"Kotlin API Example","index":"2","children":[{"id":"fetch-a-list-of-female-employees-1","title":"Fetch a list of female employees","index":"2.1"},{"id":"get-the-set-of-all-employees-department-1","title":"Get the set of all employees department","index":"2.2"},{"id":"accumulate-total-salary-of-a-particular-department-1","title":"Accumulate total salary of a particular department","index":"2.3"},{"id":"return-a-string-concatenating-all-employees-above-by-comma-and-in-reverse-alphabetic-order-1","title":"Return a string concatenating all employees above by comma and in reverse alphabetic order","index":"2.4"},{"id":"find-out-the-eldest-employee-1","title":"Find out the eldest employee","index":"2.5"},{"id":"return-a-list-of-male-employees-sorted-by-ageasc-then-by-salarydesc-1","title":"Return a list of male employees sorted by Age(asc) then by salary(desc)","index":"2.6"},{"id":"compute-sum-of-salaries-by-department-name-1","title":"Compute sum of salaries by department name","index":"2.7"},{"id":"compute-average-salaries-by-department-name-and-sort-by-average-salaryasc-1","title":"Compute average salaries by department name and sort by average salary(asc)","index":"2.8"}]}]}