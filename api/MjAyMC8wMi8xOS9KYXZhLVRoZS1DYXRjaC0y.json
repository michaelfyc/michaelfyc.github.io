{"title":"Java:The Catch(2)","date":"2020-02-19T12:04:28.000Z","date_formatted":{"ll":"Feb 19, 2020","L":"02/19/2020","MM-DD":"02-19"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/02/19/bf8ce73681b45.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/02/19/Java-The-Catch-2","comments":true,"tags":["Java","tips"],"categories":["Programming"],"updated":"2020-03-05T06:49:48.048Z","content":"<h5 id=\"3-integer\">3. Integer<a href=\"#3-integer\" title=\"3. Integer\"></a></h5><p>Integer and String have many things in common, including constant pool and means of creating.  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a=<span class=\"number\">1</span>;</span><br><span class=\"line\">Integer b=<span class=\"number\">1</span>;</span><br><span class=\"line\">Integer c=<span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(a==b);<span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(a==c);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>What may seem confusing is:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a=<span class=\"number\">1000</span>;</span><br><span class=\"line\">Integer b=<span class=\"number\">1000</span>;</span><br><span class=\"line\">System.out.println(a==b);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>That’s because for Integer, <strong>only number in range -128-127 will be cached in constant pool.</strong> Any number out of the range will still be allocated from heap.</p>\n<h5 id=\"4string-stringbuilder-stringbuffer\">4.String, StringBuilder, StringBuffer<a href=\"#4string-stringbuilder-stringbuffer\" title=\"4.String, StringBuilder, StringBuffer\"></a></h5><p>String is built in <code>java.lang</code>, whereas <code>StringBuilder</code> and <code>StringBuffer</code> are in <code>java.util</code>,serving as a tool for String.</p>\n<p>As mentioned above, String is immutable. Every time you join two String together or simply using “+” operator is actually making out new Strings and taking up new memory. Statements like <code>String a=&quot;Hello，&quot;;a+=&quot;World&quot;;</code> ,and especially when you join the Strings with “+” in a for loop, lots of garbage is generated,slowing our JVM efficiency.   That’s why Java invents constant pools as cache, and tools like <code>StringBuilder</code>.</p>\n<p>With <code>StringBuilder</code>,we can use <code>StringBuilder.append()</code>method to avoid the extra costs of precious memory. <code>StringBuilder.delete()</code> works perfectly as well.</p>\n<p>Here’s a quick example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a=<span class=\"string\">\"0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    a+=i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(a);</span><br><span class=\"line\"></span><br><span class=\"line\">StringBuilder b=<span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    b.append(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(b.toString());</span><br><span class=\"line\"><span class=\"comment\">/**Despite the equal output 0123456789, the latter saves more memory. */</span></span><br></pre></td></tr></table></figure>\n\n<p><code>StringBuilder</code> and <code>StringBuffer</code> have similar usage. The only difference between these two utilizers is that <code>StringBuffer</code> is thread-safe, while <code>StringBuilder</code> is not.</p>\n<h6 id=\"5-compare-them\">5. Compare them!<a href=\"#5-compare-them\" title=\"5. Compare them!\"></a></h6><p>Besides <code>==</code> and <code>equals()</code>, we also have <code>compareTo()</code> . For classes that implements interface <code>Comparable</code>, be closely aware of the situation where the result of <code>equals</code> may not be consistent with <code>compareTo</code>. This is not a catastrophe, but it’s something to be paid close attention. <code>BigDecimal</code> is a good example of such inconsistence.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        BigDecimal num1 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        BigDecimal num2 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"1.0\"</span>);</span><br><span class=\"line\">        System.out.println(num1 == num2);</span><br><span class=\"line\">        System.out.println(num1.equals(num2));</span><br><span class=\"line\">        System.out.println(num1.compareTo(num2));</span><br><span class=\"line\">    <span class=\"comment\">//result:</span></span><br><span class=\"line\">        <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"comment\">//0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As for normal primitive types, their respective boxed primitive class provides static <code>compare()</code> method(For Java version above 7). Especially for comparison in floating point type,  e.g. <code>Double.compare()</code> and <code>Float.compare()</code>.  are greatly recommended since operators <code>&gt;</code> and <code>&lt;</code> are error-prone. </p>\n<h2 id=\"valuesampreference\">Values&amp;Reference<a href=\"#valuesampreference\" title=\"Values&amp;Reference\"></a></h2><h5 id=\"1-for-or-foreach\">1. for or <code>forEach</code>?<a href=\"#1-for-or-foreach\" title=\"1. for or forEach?\"></a></h5><p>Any class that implements Interface <code>Iterable</code>  supports <code>forEach</code>.</p>\n<p>Take a look of the instance below:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearArray1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">           \tarr[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearArray2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> temp:arr)&#123;</span><br><span class=\"line\">            temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] b=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        clearArray1(a);</span><br><span class=\"line\">        clearArray2(b);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"a:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i:a)&#123;</span><br><span class=\"line\">            System.out.print(i+<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"b:\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i:b)&#123;</span><br><span class=\"line\">            System.out.print(i+<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And the output is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:0     0       0       0       0</span><br><span class=\"line\">b:1     2       3       4       5</span><br></pre></td></tr></table></figure>\n\n<p>What on earth is going on here?</p>\n<p>If you ever get to know how <code>javac</code> compiles, you shall know during preprocessing,  <code>clearArray2(int[] arr)</code> would be translated to:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearArray2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] arr$ = arr, len$ = arr$.length,i$=<span class=\"number\">0</span>; i$&lt;len$; ++i$)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> temp = arr$[i$];</span><br><span class=\"line\">    \t&#123;</span><br><span class=\"line\">        \ttemp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>No wonder the array remains the same.</p>\n","prev":{"title":"Why ArrayList supports variable-length?","link":"2020/02/21/Why-ArrayList-supports-variable-length"},"next":{"title":"Java:The Catch(1)","link":"2020/02/19/Java-The-Catch-1"},"plink":"https://git.michaelsblog.top/2020/02/19/Java-The-Catch-2/","toc":[{"id":"valuesampreference","title":"Values&amp;Reference","index":"1"}]}