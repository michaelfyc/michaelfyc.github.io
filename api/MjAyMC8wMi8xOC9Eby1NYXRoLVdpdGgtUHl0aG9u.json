{"title":"Do-Math-With-Python","date":"2020-02-18T13:27:03.000Z","date_formatted":{"ll":"Feb 18, 2020","L":"02/18/2020","MM-DD":"02-18"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/02/19/fac9c5f1a5320.jpg?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/02/18/Do-Math-With-Python","tags":["Python"],"updated":"2020-02-19T09:01:23.185Z","content":"<p>​    Python is nowadays commonly used in massive and intensive data calculation(in spite of its notorious slow). Many tutorials may tell you how handy <code>numpy</code> and <code>scipy</code> are.  And  <code>sympy</code>, despite a less trending math library, for someone like me who is less familiar with <code>Matlab</code> syntax, has the potential to replace it with <code>matplotlib</code> (Octave may not be a good substitution to me. It’s still <code>Matlab-style</code> Some of the packages of Octave even depend on <code>sympy</code>!). Let’s take a closer look of these libraries.</p>\n<p><img src=\"https://i.loli.net/2020/02/18/BeDAuOdQIrtvlkK.jpg\" alt=\"sympy_logo.JPG\" style=\"zoom:67%;\" /><img src=\"https://i.loli.net/2020/02/18/Iu2bdO3xDBm79Nt.png\" alt=\"numpy_logo.png\" style=\"zoom:100%;\" /><img src=\"https://i.loli.net/2020/02/18/mNyArcfpMRnsga2.png\" alt=\"scipy_logo.png\" style=\"zoom:27%;\" /></p>\n<h3 id=\"calculations\">Calculations<a href=\"#calculations\" title=\"Calculations\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">factorial(n)</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>) <span class=\"comment\">#120</span></span><br><span class=\"line\"></span><br><span class=\"line\">binomial(n,k) <span class=\"comment\">#Combination nCk</span></span><br><span class=\"line\">binomial(<span class=\"number\">4</span>,<span class=\"number\">2</span>) <span class=\"comment\">#6</span></span><br><span class=\"line\"></span><br><span class=\"line\">expr.evalf(n) <span class=\"comment\">#evaluate a numeric expression into a n-digit(15 by default) float </span></span><br><span class=\"line\">pi.evalf(<span class=\"number\">5</span>) <span class=\"comment\">#3.1416</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"simplification-and-expansion\">Simplification and Expansion<a href=\"#simplification-and-expansion\" title=\"Simplification and Expansion\"></a></h3><p>As far as I know, this could only be used by symbol calculation libraries, aka <code>sympy</code>. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy </span><br><span class=\"line\"></span><br><span class=\"line\">x,y,z=sympy.symbols(<span class=\"string\">'x y z'</span>)</span><br><span class=\"line\">f=x+<span class=\"number\">2</span>*y+<span class=\"number\">3</span>*z+(x-y)**<span class=\"number\">2</span>-(x+y+z)**<span class=\"number\">2</span></span><br><span class=\"line\">pprint(sympy.expand(f))</span><br><span class=\"line\"><span class=\"comment\"># result:</span></span><br><span class=\"line\"><span class=\"comment\">#                                      2</span></span><br><span class=\"line\"><span class=\"comment\"># -4⋅x⋅y - 2⋅x⋅z + x - 2⋅y⋅z + 2⋅y - z  + 3⋅z</span></span><br><span class=\"line\"></span><br><span class=\"line\">g=cos(x)/sin(x)</span><br><span class=\"line\">pprint(sympy.simplify(g))</span><br><span class=\"line\"><span class=\"comment\"># result: 1/tan(x)</span></span><br></pre></td></tr></table></figure>\n\n<p>Yet be aware that <code>simplify(&#39;x**2+2*x+1&#39;)</code> is still <code>x**2+2*x+1</code>, but not <code>(x+1)**2</code> . Well, we can do this by using function <code>factor</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sympy.factor(<span class=\"string\">'x+1/x-2'</span>)</span><br><span class=\"line\"><span class=\"comment\">#result: (x-1)**2/x</span></span><br></pre></td></tr></table></figure>\n\n<p>There are also <code>collect</code> method that collects common powers in an expression, and <code>trigsimp</code> and <code>expand_trig</code> that simplify/expand expressions using trigonometric identities. </p>\n<h3 id=\"matrices-calculation\">Matrices Calculation<a href=\"#matrices-calculation\" title=\"Matrices Calculation\"></a></h3><p>​    Matrices are basic elements of linear algebra. It simplifies calculations of large amount of numbers, solves multivariate equations, and plays an important role in computer vision and deep learning.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#numpy</span></span><br><span class=\"line\">ma=numpy.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]])</span><br><span class=\"line\">mb=numpy.array([[<span class=\"number\">3</span>,<span class=\"number\">12</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>],[<span class=\"number\">5</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>]])</span><br><span class=\"line\">mc=numpy.array([[<span class=\"number\">3</span>,<span class=\"number\">9</span>],[<span class=\"number\">2</span>,<span class=\"number\">8</span>],[<span class=\"number\">1</span>,<span class=\"number\">5</span>]])</span><br><span class=\"line\">shapea=ma.shape</span><br><span class=\"line\">sum=ma+mb</span><br><span class=\"line\">sub=ma-mb</span><br><span class=\"line\">product=numpy.dot(ma,mc)</span><br><span class=\"line\">inva=numpy.linalg.inv(ma) <span class=\"comment\"># will raise a numpy.linalg.LinAlgError if det==0</span></span><br><span class=\"line\">transa=numpy.transpose(ma) <span class=\"comment\"># for 1 dimension may raise error</span></span><br><span class=\"line\">deta=numpy.linalg.det(ma)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sympy</span></span><br><span class=\"line\">mx=sympy.Matrix([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]])</span><br><span class=\"line\">my=sympy.Matrix([[<span class=\"number\">3</span>,<span class=\"number\">12</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>],[<span class=\"number\">5</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>]])</span><br><span class=\"line\">mz=sympy.Matrix([[<span class=\"number\">3</span>,<span class=\"number\">9</span>],[<span class=\"number\">2</span>,<span class=\"number\">8</span>],[<span class=\"number\">1</span>,<span class=\"number\">5</span>]])</span><br><span class=\"line\">Sum=mx+my</span><br><span class=\"line\">Sub=mx-my</span><br><span class=\"line\">Product=mx*mz</span><br><span class=\"line\">invx=mx**<span class=\"number\">-1</span> <span class=\"comment\"># will raise a sympy.NonInvertibleMatrixError if det==0</span></span><br><span class=\"line\">transx=mx.T</span><br><span class=\"line\">detx=mx.det()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## advanced usage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rank</span></span><br><span class=\"line\"></span><br><span class=\"line\">ra=numpy.linalg.matrix_rank(ma)</span><br><span class=\"line\">rx=mx.rank()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if a nxn-shape square has rank smaller than n,then it's singular, else it's nonsingular</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eigenvalue and eigenvector</span></span><br><span class=\"line\"></span><br><span class=\"line\">eigena=numpy.linalg.eig(ma) <span class=\"comment\">#return a tuple, former eignvalue, latter unit eignvector</span></span><br><span class=\"line\">eigenx=mx.eigenvals() <span class=\"comment\"># param multiple, if True, return a list,else return dict(eigen:multiplicity) </span></span><br><span class=\"line\">eigenVectorx=mx.eigenvects() <span class=\"comment\">#return list of tuples in form of (eigen:multiplicity,[eigenvect])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nevertheless, eignvalue and eigenvector calculations are expensive, thus recommend using charpoly to calculate characteristic polynomial</span></span><br><span class=\"line\"></span><br><span class=\"line\">lamda=sympy.symbols(<span class=\"string\">'lamda'</span>)</span><br><span class=\"line\">p=mx.charpoly(lamda)</span><br><span class=\"line\">sympy.factor(p)</span><br><span class=\"line\"><span class=\"comment\"># result:</span></span><br><span class=\"line\"><span class=\"comment\">#   ⎛ 2          ⎞</span></span><br><span class=\"line\"><span class=\"comment\"># λ⋅⎝λ  - 9⋅λ - 6⎠  &lt;=Actually this could be futher factored..sympy's fault </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># row echelon form (行阶梯矩阵)</span></span><br><span class=\"line\">M=sympy.Matrix([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\">m=numpy.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>][<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">MM=M.rref()[<span class=\"number\">0</span>] <span class=\"comment\"># rref returns a tuple: (row echelon form,indices of pivot column) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Well,pprint with sympy looks much prettier</span></span><br></pre></td></tr></table></figure>\n\n<p>Sometimes we need to generate a matrix.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scipy</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#identity matrix</span></span><br><span class=\"line\">Ma=sympy.eye(<span class=\"number\">3</span>) <span class=\"comment\"># a 3x3 identity matrix</span></span><br><span class=\"line\">ma=numpy.eye(<span class=\"number\">3</span>) <span class=\"comment\"># be aware that numpy generates float matrix without claiming data types</span></span><br><span class=\"line\">maa=numpy.eye(<span class=\"number\">3</span>,dtype=int8)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># matrix of all zeros</span></span><br><span class=\"line\">Mb=sympy.zeros(n,m) <span class=\"comment\"># creates a nxm matrix of 0s</span></span><br><span class=\"line\">mb=numpy.zeros(n) <span class=\"comment\"># numpy could only create a square of 0s unless params is a list</span></span><br><span class=\"line\">mbb=numpy.zeros([n,m]) <span class=\"comment\"># creates a nxm matrix of 0s</span></span><br><span class=\"line\"><span class=\"comment\">#similarly, ones creates a matrix of 1s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># diagonal matrix</span></span><br><span class=\"line\">Mc=sympy.diag(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\"># param can be matrix too</span></span><br><span class=\"line\">mc=numpy.diag([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\"># could be tuple (1,2,3) as well</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"integral\">Integral<a href=\"#integral\" title=\"Integral\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.integrate <span class=\"keyword\">import</span> quad</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sympy</span></span><br><span class=\"line\">x=sympy.Symbol(<span class=\"string\">'x'</span>)</span><br><span class=\"line\">f=sympy.integrate(<span class=\"string\">\"x**2+1\"</span>,x)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#definite integral</span></span><br><span class=\"line\">result=sympy.integrate(<span class=\"string\">\"x**2+1\"</span>,(x,<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#with variable limits</span></span><br><span class=\"line\">result=sympy.integrate(<span class=\"string\">\"sin(x)/x\"</span>,(x,-sympy.oo,sympy.oo))</span><br><span class=\"line\">print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#with piecewise functions</span></span><br><span class=\"line\">f=sympy.Piecewise((x**<span class=\"number\">2</span>,x&lt;<span class=\"number\">0</span>),(x,x&gt;=<span class=\"number\">0</span>))</span><br><span class=\"line\">result=sympy.integrate(f,x) <span class=\"comment\"># or sympy.integrate(f,(x,-1,2)) to calculate value</span></span><br><span class=\"line\">print(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#scipy</span></span><br><span class=\"line\">result,error=scipy.integrate.quad(<span class=\"keyword\">lambda</span> x:x**<span class=\"number\">2</span>+<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>) </span><br><span class=\"line\">print(result)</span><br><span class=\"line\"><span class=\"comment\">#return a tuple (result and errors)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#scipy piecewise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x**<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">scipy.integrate.quad(g,<span class=\"number\">-1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">differences:</span></span><br><span class=\"line\"><span class=\"string\">sympy can show the integral impression while scipy can't</span></span><br><span class=\"line\"><span class=\"string\">for definite integral, sympy shows result in fraction, while scipy in decimal.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Nevertheless, scipy support dblquad and tplquad that sympy does not possess</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n\n<p>In contrast, <code>sympy</code>‘s integral methods are more powerful and useful for pure mathematics calculation.</p>\n<h3 id=\"derivative\">Derivative<a href=\"#derivative\" title=\"Derivative\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">import</span> scipy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sympy</span></span><br><span class=\"line\"></span><br><span class=\"line\">x=sympy.Symbol(<span class=\"string\">'x'</span>)</span><br><span class=\"line\">f=<span class=\"number\">1</span>/(<span class=\"number\">1</span>+cos(x)**<span class=\"number\">2</span>)</span><br><span class=\"line\">pprint(sympy.diff(f,x))  <span class=\"comment\">#for n-th derivative, pass the n behind x: diff(f,x,n)</span></span><br><span class=\"line\"><span class=\"comment\"># result: </span></span><br><span class=\"line\"><span class=\"comment\"># 2⋅sin(x)⋅cos(x)</span></span><br><span class=\"line\"><span class=\"comment\"># ───────────────</span></span><br><span class=\"line\"><span class=\"comment\">#              2</span></span><br><span class=\"line\"><span class=\"comment\"># ⎛   2       ⎞</span></span><br><span class=\"line\"><span class=\"comment\"># ⎝cos (x) + 1⎠</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#calculate accurate value</span></span><br><span class=\"line\">sympy.diff(f,x).evalf(<span class=\"number\">6</span>,subs=&#123;<span class=\"string\">'x'</span>:pi/<span class=\"number\">4</span>&#125;) <span class=\"comment\"># 0.444444</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#scipy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+cos(x)**<span class=\"number\">2</span>)</span><br><span class=\"line\">scipy.misc.derivative(g,scipy.pi/<span class=\"number\">4</span>,dx=<span class=\"number\">1e-6</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>Numpy?</code> Well…</p>\n<h3 id=\"finding-solution\">Finding Solution<a href=\"#finding-solution\" title=\"Finding Solution\"></a></h3><p><code>Sympy</code> can solve lots of type of equations, while <code>numpy</code> and <code>scipy</code> are restricted to the limited types.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sympy</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"><span class=\"keyword\">import</span> scipy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sympy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sympy uses Eq(a,b) to represent the values between the equation mark: a=b</span></span><br><span class=\"line\"><span class=\"comment\"># thus</span></span><br><span class=\"line\"></span><br><span class=\"line\">x=sympy.Symbol(<span class=\"string\">'x'</span>)</span><br><span class=\"line\">pprint(Eq(x**<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"comment\">#  2</span></span><br><span class=\"line\"><span class=\"comment\"># x  - 1 = 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># and.. solveset (recommend using solveset())</span></span><br><span class=\"line\">sympy.solveset(Eq(x**<span class=\"number\">2</span><span class=\"number\">-1</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"comment\"># result: &#123;-1, 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>If there are multiple roots, you can determine the root in the certain range.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solveset(Eq(x**<span class=\"number\">3</span>,<span class=\"number\">1</span>),domain=S.Complexes/S.Reals/ImageSet/S.Naturals/S.Naturals0/S.Integers,Range(<span class=\"number\">0</span>,<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<p>For linear equations with n-unknowns, we can use <code>linesolve</code>:</p>\n<p>For Differential Equations, use <code>dsolve()</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=sympy.symbols(<span class=\"string\">'x'</span>)</span><br><span class=\"line\">f=sympy.symbols(<span class=\"string\">'f'</span>,cls=Function)</span><br><span class=\"line\">eq=Eq(f(x).diff(x , <span class=\"number\">2</span>) + f(x).diff(x) + <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#               2</span></span><br><span class=\"line\"><span class=\"comment\"># d           d</span></span><br><span class=\"line\"><span class=\"comment\"># ──(f(x)) + ───(f(x)) + 2 = 0</span></span><br><span class=\"line\"><span class=\"comment\"># dx           2</span></span><br><span class=\"line\"><span class=\"comment\">#            dx</span></span><br><span class=\"line\"></span><br><span class=\"line\">sympy.dsolve(eq)</span><br><span class=\"line\"><span class=\"comment\"># result:</span></span><br><span class=\"line\"><span class=\"comment\">#                 -x</span></span><br><span class=\"line\"><span class=\"comment\"># f(x) = C₁ + C₂⋅ℯ   - 2⋅x</span></span><br></pre></td></tr></table></figure>\n\n<p>Isn’t it great?</p>\n","next":{"title":"The Game is Back On","link":"2020/02/16/The-Game-is-Back-On"},"plink":"http://yoursite.com/2020/02/18/Do-Math-With-Python/","toc":[{"id":"calculations","title":"Calculations","index":"1"},{"id":"simplification-and-expansion","title":"Simplification and Expansion","index":"2"},{"id":"matrices-calculation","title":"Matrices Calculation","index":"3"},{"id":"integral","title":"Integral","index":"4"},{"id":"derivative","title":"Derivative","index":"5"},{"id":"finding-solution","title":"Finding Solution","index":"6"}]}