{"title":"Null,NaN and Infinity","date":"2020-02-24T16:05:31.000Z","date_formatted":{"ll":"Feb 25, 2020","L":"02/25/2020","MM-DD":"02-25"},"link":"2020/02/25/Null-NaN-and-Infinity","tags":["tips"],"categories":["Programming"],"updated":"2020-03-05T06:49:56.063Z","content":"<p>​    <code>null</code>, <code>NaN</code>, <code>infinity</code> can be seen in almost every programming language. What are their differences? </p>\n<h2 id=\"null\">Null<a href=\"#null\" title=\"Null\"></a></h2><p> <code>null</code> is something inherited from Clang. It is used to describe the state when an object hasn’t been initialized(or a pointer that is pointing nothing, a null pointer). </p>\n<p>In C, NULL is defined as below: (<strong>In C,<code>null</code> is uppercased</strong>)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL ((void *)0)</span></span><br></pre></td></tr></table></figure>\n\n<p>In C, you may do something like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *ptr=<span class=\"literal\">NULL</span>:</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a);</span><br><span class=\"line\">    ptr=&amp;a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(*ptr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, C++ does not allow void-type pointer to cast to another type, though it’s inherited from C. Before C++ 11, people use 0. This may cause problem as well:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> <span class=\"comment\">//overload!</span></span></span><br></pre></td></tr></table></figure>\n\n<p> By default,  <code>foo(1,0)</code> is called due to overloading. So you will have to adjust your code if you want to call the first <code>foo</code>.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(<span class=\"number\">1</span>, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span> *&gt;(<span class=\"number\">0</span>)) <span class=\"comment\">//too complicated!</span></span><br></pre></td></tr></table></figure>\n\n<p>Therefore, C++ 11 introduces <code>nullptr</code> as one of its keyword to solve this problem.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(<span class=\"number\">1</span>,<span class=\"literal\">nullptr</span>)</span><br></pre></td></tr></table></figure>\n\n<p>That’s C&amp;C++. </p>\n<p>As for Java and C#, where no pointer exists anymore, <code>null</code> is a special type. It is the default value of any reference. It has neither methods nor properties. Compiler won’t complain if you try to call a method of an uninitialized object. You’ll receive a <code>NullPointerException</code> in runtime instead, which is annoying and should be avoided.</p>\n<h3 id=\"does-nullnull\">Does <code>null==null</code>?<a href=\"#does-nullnull\" title=\"Does null==null?\"></a></h3><p>Yes.</p>\n<h3 id=\"nilampnone\">Nil&amp;None?<a href=\"#nilampnone\" title=\"Nil&amp;None?\"></a></h3><p><code>nil</code> is just like <code>null</code>, but in another name. It appears in Rust, Ruby, Lua, Go, and other languages. As for Python, it’s <code>None</code>.</p>\n<h2 id=\"nan\">NaN<a href=\"#nan\" title=\"NaN\"></a></h2><p><code>NaN</code> stands for “Not a Number”. It usually pop out in math calculation.</p>\n<p>In C/C++ on Windows, it is shown as <code>#IND</code>, which stands for indeterminate. On Linux, it’s <code>nan</code>.</p>\n<p><code>NaN</code> results from situations below:</p>\n<ol><li><p>One of the parameter is <code>NaN</code>, such as <code>1.5+NaN</code></p>\n</li>\n<li><p>Calculations below:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addition:</span> <span class=\"string\">infinity+-infinity,</span> <span class=\"string\">-infinity+infinity</span></span><br><span class=\"line\"><span class=\"attr\">submission:</span> <span class=\"string\">infinity-infinity,</span> <span class=\"string\">-infinity-(-infinity)</span></span><br><span class=\"line\"><span class=\"attr\">multiplication:</span> <span class=\"number\">0</span><span class=\"string\">*infinity,</span> <span class=\"number\">0</span><span class=\"string\">*(-infinity)</span></span><br><span class=\"line\"><span class=\"attr\">division:</span> <span class=\"number\">0</span><span class=\"string\">/0,</span> <span class=\"string\">infinity/infinity,</span> <span class=\"string\">infinity/-infinity,</span> <span class=\"string\">-infinity/infinity,</span></span><br><span class=\"line\"><span class=\"string\">-infinity/-infinity</span> <span class=\"comment\"># 0/0 results fatal error.At least one zero should be floating type.</span></span><br><span class=\"line\"><span class=\"attr\">power:</span> <span class=\"string\">pow(1,infinity)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Operations that result in complex numbers, such as finding square root of a negative number.</p>\n</li>\n</ol><h3 id=\"does-nannan\">Does <code>NaN==NaN</code>?<a href=\"#does-nannan\" title=\"Does NaN==NaN?\"></a></h3><p>No. <code>NaN</code> does not equal to anything. Strong equal like <code>===</code> in JavaScript gives a <code>false</code> either. By conventions, there is a static method <code>isNaN</code> to let us know if a variable is  <code>NaN</code>. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C++</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::isnan(<span class=\"number\">0.0</span>/<span class=\"number\">0.0</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::isnan(<span class=\"number\">2.5</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\">Double.isNaN(<span class=\"number\">0</span>/<span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//javascript</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">0.0</span>/<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">0</span>/<span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python</span></span><br><span class=\"line\">math.isnan(<span class=\"number\">0</span>/<span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"infinity\">Infinity<a href=\"#infinity\" title=\"Infinity\"></a></h2><p>Just like what is in Math, there are positive infinity and negative infinity.</p>\n<p>These operations may lead to <code>infinity</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">addition:</span> <span class=\"type\">!NaN</span> <span class=\"string\">+</span> <span class=\"string\">infinity,</span> <span class=\"type\">!NaN</span> <span class=\"string\">+</span> <span class=\"string\">(-infinity),infinity</span> <span class=\"string\">+</span> <span class=\"string\">infinity,</span> <span class=\"string\">-infinity</span> <span class=\"string\">+</span> <span class=\"string\">-infinity</span></span><br><span class=\"line\"><span class=\"attr\">submission:</span> <span class=\"type\">!NaN</span> <span class=\"bullet\">-</span> <span class=\"string\">infinity,</span> <span class=\"type\">!NaN</span> <span class=\"bullet\">-</span> <span class=\"string\">(-infinity),</span> <span class=\"string\">-infinity-infinity,</span> <span class=\"string\">infinity</span> <span class=\"bullet\">-</span> <span class=\"string\">(-infinity)</span> </span><br><span class=\"line\"><span class=\"attr\">multiplication:</span> <span class=\"string\">!(NaN</span> <span class=\"string\">&amp;&amp;</span> <span class=\"number\">0</span><span class=\"string\">)</span> <span class=\"string\">*</span> <span class=\"string\">infinity,</span> <span class=\"string\">!(NaN</span> <span class=\"string\">&amp;&amp;</span> <span class=\"number\">0</span><span class=\"string\">)</span> <span class=\"string\">*</span> <span class=\"string\">(-infinity),</span> <span class=\"string\">infinity</span> <span class=\"string\">*</span> <span class=\"string\">infinity,</span> </span><br><span class=\"line\"><span class=\"string\">infinity</span> <span class=\"string\">*</span> <span class=\"string\">-infinity,</span> <span class=\"string\">-infinity</span> <span class=\"string\">*</span> <span class=\"string\">infinity,</span> <span class=\"string\">-infinity</span> <span class=\"string\">*</span> <span class=\"string\">-infinity</span></span><br><span class=\"line\"><span class=\"attr\">division:</span> <span class=\"type\">!NaN</span><span class=\"string\">/infinity</span></span><br></pre></td></tr></table></figure>\n\n<p>Floating number overflow may give <code>infinity</code> as well. </p>\n<p>In C/C++ on Windows, <code>1.#INF00</code> stands for positive infinity and <code>-1.#INF00</code> for negative infinity. On Linux, it’s <code>inf</code> and <code>-inf</code>.</p>\n<h3 id=\"does-infinityinfinity\">Does <code>infinity==infinity</code>?<a href=\"#does-infinityinfinity\" title=\"Does infinity==infinity?\"></a></h3><p>Yes.</p>\n","prev":{"title":"Funny Features of JavaScript(1)","link":"2020/02/26/Funny-Features-of-JavaScript-1"},"next":{"title":"Basic YAML Syntax","link":"2020/02/24/Basic-YAML-Syntax"},"plink":"https://git.michaelsblog.top/2020/02/25/Null-NaN-and-Infinity/","toc":[{"id":"null","title":"Null","index":"1","children":[{"id":"does-nullnull","title":"Does null&#x3D;&#x3D;null?","index":"1.1"},{"id":"nilampnone","title":"Nil&amp;None?","index":"1.2"}]},{"id":"nan","title":"NaN","index":"2","children":[{"id":"does-nannan","title":"Does NaN&#x3D;&#x3D;NaN?","index":"2.1"}]},{"id":"infinity","title":"Infinity","index":"3","children":[{"id":"does-infinityinfinity","title":"Does infinity&#x3D;&#x3D;infinity?","index":"3.1"}]}]}