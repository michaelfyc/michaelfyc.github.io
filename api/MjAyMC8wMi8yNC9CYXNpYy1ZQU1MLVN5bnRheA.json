{"title":"Basic YAML Syntax","date":"2020-02-24T00:58:07.000Z","date_formatted":{"ll":"Feb 24, 2020","L":"02/24/2020","MM-DD":"02-24"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/02/23/0eba7d5a43868.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/02/24/Basic-YAML-Syntax","tags":["tips"],"categories":["Programming"],"updated":"2020-03-05T06:48:24.314Z","content":"<p>​    Many who write Spring feel exhausted and frustrated writing dozens of lines of XML in configuration. That’s where Spring comes to rescue. Boasting of its simplicity, SpringBoot frees programmers from writing repetitive codes. Nevertheless, some times we still need to customize our configuration. The good thing is, we are not restricted to writing XML to configure Instead, we may configure the project in properties and, our major topic today, <strong>YAML</strong>. </p>\n<h3 id=\"yaml-and-its-basic-syntax\">YAML and its Basic Syntax<a href=\"#yaml-and-its-basic-syntax\" title=\"YAML and its Basic Syntax\"></a></h3><p><strong>YAML</strong> is the abbreviation of “<strong>Y</strong>AML <strong>A</strong>in’t <strong>M</strong>arkup <strong>L</strong>anguage”, just like <strong>GNU</strong>, which stands for “<strong>G</strong>NU is <strong>N</strong>ot <strong>U</strong>nix”, uses recursive syntax in its name. Well, in fact it’s <strong>Y</strong>et <strong>A</strong>nother <strong>M</strong>arkup <strong>L</strong>anguage.</p>\n<p>YAML syntax really looks like JSON but slightly different.</p>\n<p>In a Java bean we may write code like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> <span class=\"keyword\">package</span>-name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.AutoWired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> another_package.Another_Class;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class_Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Class_Name Object_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String Field_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Integer&gt; List_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;Another_Class,String&gt; Map_Name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@AutoWired</span></span><br><span class=\"line\">    ...<span class=\"comment\">/*getters and setters, and constructorIs*/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common and the most easiest way of wiring by either using Spring annotations or annotations in <code>javax.inject</code> JAR, since the framework helps you do the job.</p>\n<p>But sometimes we still need to configure the dependent injection ourselves.</p>\n<p>In XML, we may wire our beans like this:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id:object-name</span> <span class=\"attr\">class:complete-class-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Field-Name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">type</span>=<span class=\"string\">java.lang.String</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"List-Name\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">10</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Map-Name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">java.lang.String</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key-ref</span>=<span class=\"string\">\"Another_Class_1\"</span>, <span class=\"attr\">value</span>=<span class=\"string\">\"happy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key-ref</span>=<span class=\"string\">\"Another_Class_2\"</span>, <span class=\"attr\">value</span>=<span class=\"string\">\"sad\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>In YAML, properties can be write like this:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Object-Name:</span></span><br><span class=\"line\">    <span class=\"attr\">Field_Name:</span> <span class=\"string\">value</span></span><br><span class=\"line\">    <span class=\"attr\">List_Name:</span></span><br><span class=\"line\">     <span class=\"number\">-1</span></span><br><span class=\"line\">     <span class=\"number\">-10</span></span><br><span class=\"line\">     <span class=\"comment\">#or List_Name:[1,10]</span></span><br><span class=\"line\">    <span class=\"attr\">Map_Name:</span> </span><br><span class=\"line\">     <span class=\"attr\">Another_Class_1:</span> <span class=\"string\">happy</span></span><br><span class=\"line\">     <span class=\"attr\">Another_Class_2:</span> <span class=\"string\">sad</span></span><br><span class=\"line\">    <span class=\"comment\">#or Map_Name:&#123;Another_Class_1:happy,Another_Class_2:sad&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>YAML supports references with &amp;(anchor) and &ast; (alias) to avoid repeated nodes.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">User:</span> <span class=\"meta\">&amp;User</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">John</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Database:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost:3306</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"string\">*User</span> <span class=\"comment\"># symbol &lt;&lt; means merge into here</span></span><br></pre></td></tr></table></figure>\n\n<p>..which is equivalent to </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">User:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">John</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">Database:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost:3306</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">John</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>Objects in lists, lists in objects, lists in lists, objects in objects, are supported too.</p>\n<p>If sometimes the content is too long and you want to folds them:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Message:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">\t<span class=\"string\">Sorry</span> <span class=\"string\">sir,</span> <span class=\"string\">but</span> <span class=\"string\">the</span> <span class=\"string\">phone</span></span><br><span class=\"line\">\t<span class=\"string\">you</span> <span class=\"string\">are</span> <span class=\"string\">dialing</span> <span class=\"string\">is</span> <span class=\"string\">power-off.</span></span><br><span class=\"line\">\t<span class=\"string\">Please</span> <span class=\"string\">call</span> <span class=\"string\">again</span> <span class=\"string\">later.</span></span><br></pre></td></tr></table></figure>\n\n<p>In brief, YAML follows several rules:</p>\n<ol><li><p>YAML is capital-sensitive.</p>\n</li>\n<li><p>Indention should <span style=\"color:red\">only use SPACE instead of TAB</span>; Yet, you may use as much Space indention as you want, as long as those data in the same level are aligned.  </p>\n</li>\n<li><p>String can use without apostrophes or double quotes;</p>\n<blockquote>\n<p>In fact, it’s  completely legal to add apostrophes and double quotes around the string. The catch is, if you add apostrophes around a string like ‘Hello \\n Michael’, the final result injection will be:<br><code>Hello</code></p>\n<p><code>Michael</code>. </p>\n<p>If you add double quotes around a string like “Hello \\n Michael”, you will get  <code>Hello \\n Michael</code> in the end.</p>\n</blockquote>\n</li>\n<li><p>Comments are after hash tag #</p>\n</li>\n<li><p>Instead of  <code>&lt;null/&gt;</code>  in XML, YAML use ~</p>\n</li>\n<li><p>YAML uses three dashes <code>---</code> to separate directives from document content.  Three dots  <code>...</code> indicate the end of a document without starting a new one, for use in communication channels. </p>\n</li>\n<li><p>By convention, the YAML file of Spring is named  <strong><code>application.yml</code></strong>. The YAML file is better put where <code>application.properties</code> is.</p>\n<p>We may use @Configuration or @Component when auto-wiring. In the meantime, for XML context, we have <code>ClassPathXmlApplicationContext</code>. Well, for YAML, we have annotation <strong><code>@ConfigurationProperties(prefix=Object-Name)</code></strong>.</p>\n</li>\n</ol><p>Take the instance we’ve talked about above, the original Java Bean should be written like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> package_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashmap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix=Object_Name)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Object_Name</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] array;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String,Integer&gt; map;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Object_Name:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Michael</span></span><br><span class=\"line\">    <span class=\"attr\">array:</span> <span class=\"string\">[1,10,9]</span></span><br><span class=\"line\">    <span class=\"attr\">map:</span> <span class=\"string\">&#123;age:19,height:176&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"springprofiles\">Spring.profiles<a href=\"#springprofiles\" title=\"Spring.profiles\"></a></h3><p>With Spring and YAML, You can write several configuration files, and decide which one to apply in current environment.</p>\n<p>For example, for development environment:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#application-dev.yml</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<p>And production environment:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#appication-prod.yml</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>Finally in <code>application.yml</code>, you can set port to 8080 by:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">profiles:</span></span><br><span class=\"line\">\t    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>  Of course, you can decide these in command lines as well.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar MyProject.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure>\n\n","prev":{"title":"Null,NaN and Infinity","link":"2020/02/25/Null-NaN-and-Infinity"},"next":{"title":"How to Remove White Space Generated by inline-block?","link":"2020/02/22/How-to-Remove-White-Space-generated-by-Inside-Block"},"plink":"https://git.michaelsblog.top/2020/02/24/Basic-YAML-Syntax/","toc":[{"id":"yaml-and-its-basic-syntax","title":"YAML and its Basic Syntax","index":"1"},{"id":"springprofiles","title":"Spring.profiles","index":"2"}]}