{"title":"Fun Fact: Why add `1=1` in SQL Query Conditions?","date":"2020-04-17T15:49:30.000Z","date_formatted":{"ll":"Apr 17, 2020","L":"04/17/2020","MM-DD":"04-17"},"link":"2020/04/17/Why-1-1","comments":true,"tags":["MySQL"],"categories":["Programming"],"updated":"2020-04-17T16:04:34.869Z","content":"<p>I happened to read one’s code below:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUser\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BaseResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM user</span><br><span class=\"line\">    WHERE 1=1</span><br><span class=\"line\">    AND ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>What’s the use of this <code>1=1</code>?</p>\n<p>Well, if you’re writing bare SQL instead of using ORM like Hibernate and SQLAlchemy, the conditions are sometimes dynamically decided.</p>\n<p>For instance, we want to fetch the user by its name or email. If both name and email are null, return the whole table.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">(String username,String email)</span></span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"SELECT * FROM tb_user\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sql += <span class=\"string\">\"WHERE username=?\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(email!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sql += <span class=\"string\">\"WHERE email=?\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PrepareStatement pstmt = connection.prepareStatement(sql);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Certainly it’s annoying if both <code>username</code> and <code>email</code> are not null.  The sql becomes:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_user <span class=\"keyword\">WHERE</span> username=? <span class=\"keyword\">WHERE</span> email=?;</span><br></pre></td></tr></table></figure>\n\n<p>It is obvious an <code>and</code> is missing between two conditions. </p>\n<p>You may think of  moving the <code>WHERE</code> out:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUsers</span><span class=\"params\">(String username,String email)</span></span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"SELECT * FROM tb_user WHERE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sql += <span class=\"string\">\"username=?\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(email!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sql += <span class=\"string\">\"AND email=?\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PrepareStatement pstmt = connection.prepareStatement(sql);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This is not working if <code>username</code> is <code>null</code>. The SQL becomes:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_user <span class=\"keyword\">WHERE</span> <span class=\"keyword\">AND</span> email=?</span><br></pre></td></tr></table></figure>\n\n<p>This definitely will lead to a bad syntax error.</p>\n<p>Of course, the problems above can be solved by adding one or two more condition judgment, but the best practice is adding a <code>1=1</code> after condition <code>WHERE</code>, since <code>1=1</code> is always true.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUsers</span><span class=\"params\">(String username,String email)</span></span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"SELECT * FROM tb_user WHERE 1=1\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sql += <span class=\"string\">\"AND username=?\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(email!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sql += <span class=\"string\">\"AND email=?\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PrepareStatement pstmt = connection.prepareStatement(sql);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now no matter <code>username</code> is <code>null</code>, <code>email</code> is <code>null</code>, both of them are <code>null</code> or not <code>null</code>, the compiler won’t complain.</p>\n<p> I’m using MyBatis, which needs writing SQL, in most of my project development. Appending this <code>1=1</code> every time afterwards could be a good habit to avoid boring syntax errors. Well of course, if you’re using ORM framework without SQL, just ignore it.</p>\n","next":{"title":"Yes, Minister--A Classic Satire","link":"2020/04/03/Yes-Minister"},"plink":"https://git.michaelsblog.top/2020/04/17/Why-1-1/"}