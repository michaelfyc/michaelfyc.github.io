{"title":"Funny Features of JavaScript(2)","date":"2020-02-27T09:44:13.000Z","date_formatted":{"ll":"Feb 27, 2020","L":"02/27/2020","MM-DD":"02-27"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/02/23/76738eea1cc90.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/02/27/Funny-Features-of-JavaScript-2","comments":true,"tags":["JavaScript"],"categories":["Programming"],"updated":"2020-03-05T06:49:11.266Z","content":"<h3 id=\"mathmax-is-negative-infinity-and-mathmin-is-positive-infinity\">Math.max is negative infinity, and Math.min is positive infinity<a href=\"#mathmax-is-negative-infinity-and-mathmin-is-positive-infinity\" title=\"Math.max is negative infinity, and Math.min is positive infinity\"></a></h3><p>There’s a trick here. <code>Math.max()</code> and  <code>Math.min()</code> are actually used to find the maximum/minimum one among given parameter. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// right usage</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">2</span>/<span class=\"number\">9</span>,<span class=\"number\">0.5</span>,<span class=\"number\">-8</span>,<span class=\"number\">1</span>/<span class=\"number\">3</span>) <span class=\"comment\">//0.5</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(<span class=\"number\">-1</span>,<span class=\"number\">-0.5</span>,<span class=\"number\">-4</span>/<span class=\"number\">3</span>) <span class=\"comment\">//-1.33333333</span></span><br></pre></td></tr></table></figure>\n\n<p>To get the maximum/minimum value in JavaScript, use <code>Number.MAX_VALUE</code> /<code>Number.MIN_VALUE</code>. Here’s another catch. <code>Number.MIN_VALUE</code> is positive. It’s the absolute value of the smallest number. Infinity, undoubtedly is much greater than them.</p>\n<p>There are two ways of explaining why <code>Math.min()</code> is greater than <code>Math.max()</code>.</p>\n<ol><li><p>Since <code>Math.min()</code> and <code>Math.max()</code> are finding the minimum/maximum parameter, then the parameter should be compared at least with infinity.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>is actually comparing 1 and negative infinity. And therefore the answer would be 1.</p>\n<p>Similarly,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.min(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>is actually comparing 1 and positive infinity. 1 is smaller than infinity, and thus the result is 1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.min(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>is actually comparing 1,2 and infinity. The JavaScript engine finds 1 to be the smallest, and returns.</p>\n<p>And when we remove the parameter, they have no number to compare with, thus returning positive/negative infinity.</p>\n<p>In conclusion, the implementation of these two methods lead to this weird result.</p>\n</li>\n<li><blockquote>\n<p>In order for</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;SUM(A union B) = SUM(SUM(A), SUM(B))</span><br></pre></td></tr></table></figure>\n\n<p>to remain true when <code>A</code> is empty and <code>B</code> is not, we must have <code>SUM(empty-set) = 0</code></p>\n<p>In order for</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;PRODUCT(A union B) = PRODUCT(PRODUCT(A), PRODUCT(B))</span><br></pre></td></tr></table></figure>\n\n<p>to remain true when <code>A</code> is empty and <code>B</code> is not, we must have <code>PRODUCT(empty-set) = 1</code></p>\n<p>And finally:</p>\n<p>In order for</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;MIN(A union B) = MIN(MIN(A), MIN(B))</span><br></pre></td></tr></table></figure>\n\n<p>to remain true when <code>A</code> is empty and <code>B</code> is not, we need <code>MIN(empty-set)</code> to be a value which is guaranteed to be greater than any possible value in B, so that it doesn’t ‘interfere with’ the result of <code>MIN(B)</code>. And we get our answer: <code>MIN(empty-set) = positive infinity</code></p>\n<p>Reference:  <a href=\"https://stackoverflow.com/questions/8848779/why-math-min-math-max\" target=\"_blank\">https://stackoverflow.com/questions/8848779/why-math-min-math-max</a> </p>\n</blockquote>\n</li>\n</ol><h3><code>[]+[]</code>,<code>[]+{}</code>,<code>{}+[]</code><a href=\"#\" title=\"[]+[],[]+{},{}+[]\"></a></h3><blockquote>\n<p>Reference:    <a href=\"https://2ality.com/2012/01/object-plus-object.html\" target=\"_blank\">https://2ality.com/2012/01/object-plus-object.html</a> </p>\n</blockquote>\n<p><code>[]</code> is an empty array, and <code>{}</code> is an empty object. </p>\n<h5 id=\"-1\"><code>[]+[]</code><a href=\"#-1\" title=\"[]+[]\"></a></h5><p>JavaScript Engine does a lot of work before you get your result. In ‘+’ operation, <code>[]</code> will be implicitly casted to string-type <code>&quot;&quot;</code> by calling <code>toString()</code> and <code>valueOf()</code>, and hence the result. The detail of it will be explained in next post.</p>\n<h5 id=\"-2\"><code>[]+{}</code><a href=\"#-2\" title=\"[]+{}\"></a></h5><p>Implicitly, <code>[]</code> is casted to “”, and because of this operator ‘+’, <code>{}</code> is casted to string as well. The default string type of an object is “[object Object]”. Concatenating  “” and “[object Object]”, we get “[object Object]”. <strong>The result is a string</strong>.</p>\n<h5 id=\"-3\"><code>{}+[]</code><a href=\"#-3\" title=\"{}+[]\"></a></h5><p>This obviously does not follow the rules above. The expected result should be “[object Object]”, but eventually 0. This is because <strong>JavaScript interprets the first <code>{}</code> as an empty code block and ignores it</strong>. The 0 is therefore computed by evaluating <code>+[]</code>. The ‘+’ you see here is not the binary addition operator, but a unary prefix operator that converts its operand to a number, in the same manner as <code>Number()</code>. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">typeof</span>(+<span class=\"string\">\"2019.0824\"</span>)</span><br><span class=\"line\"><span class=\"string\">\"number\"</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">typeof</span>(+[])</span><br><span class=\"line\"><span class=\"string\">\"number\"</span></span><br></pre></td></tr></table></figure>\n\n<p>The casted <code>[]</code> turns to 0. </p>\n<h5 id=\"further-thought-\">Further Thought: <code>{}+{}</code><a href=\"#further-thought-\" title=\"Further Thought: {}+{}\"></a></h5><p>According to the conclusion we draw from <code>{}+[]</code>, we could infer the result to be <code>NaN</code>, since <code>+{}</code> returns <code>NaN</code>: empty object cannot be converted to number. Surprisingly, this is not the case when I tried it on my Chrome Browser. Both Firefox and Edge give<code>NaN</code> , but Chrome’s answer is “[object Object] [object Object]”. I guess it’s because Chrome implicitly adds a pair of parentheses around the operations. <code>({}+{})</code> does return the string type result. </p>\n<p>I found this humorous picture about JavaScript Features.</p>\n<p><img src=\"https://img.cdn.n3ko.co/lsky/2020/02/23/4d74550e032d6.jpg?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp\" class=\"φcy\" alt=\"js-type-joke\"></p>\n<p>And this video: <a href=\"https://www.destroyallsoftware.com/talks/wat\" target=\"_blank\">https://www.destroyallsoftware.com/talks/wat</a> </p>\n<p>Enjoy JavaScript, buddy!</p>\n","prev":{"title":"How I Beautify My PowerShell in Windows Terminal","link":"2020/02/29/How-I-Beautify-My-PowerShell"},"next":{"title":"Funny Features of JavaScript(1)","link":"2020/02/26/Funny-Features-of-JavaScript-1"},"plink":"https://git.michaelsblog.top/2020/02/27/Funny-Features-of-JavaScript-2/","toc":[{"id":"mathmax-is-negative-infinity-and-mathmin-is-positive-infinity","title":"Math.max is negative infinity, and Math.min is positive infinity","index":"1"},{"id":null,"title":"[]+[],[]+{},{}+[]","index":"2"}]}