{"title":"MyBatis Java Annotation Dealing with Complicated Objects","date":"2020-08-01T11:05:40.000Z","date_formatted":{"ll":"Aug 1, 2020","L":"08/01/2020","MM-DD":"08-01"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/08/01/d56d29759a2ec.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/08/01/MyBatis-Java-Annotation","comments":true,"tags":["Java","MyBatis"],"categories":["Programming"],"updated":"2020-08-01T11:05:40.992Z","content":"<p>Suppose there are two entity classes corresponding to two tables <code>tb_user</code> and <code>tb_role</code> in SQL database. The best practice of linking the two tables would be via a transition table <code>tb_user_role</code> instead of setting foreign keys. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//Used for authentication</span></span><br><span class=\"line\">    <span class=\"meta\">@Transient</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Role role;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String roleName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here in a service class, we may want to fetch all users, as well as their roles.</p>\n<p>We may write SQL like such:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> u.*, r.* <span class=\"keyword\">FROM</span> tb_user u <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> tb_user_role ur <span class=\"keyword\">ON</span> mr.uid = u.id <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> tb_role r <span class=\"keyword\">ON</span> mr.rid = r.id;</span><br></pre></td></tr></table></figure>\n\n<p>The result looks just like what we want:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----+----------+----------+------+------------+</span><br><span class=\"line\">| id | username | password |  id  | roleName   |</span><br><span class=\"line\">+----+----------+----------+------+------------+</span><br><span class=\"line\">| 1  | admin    | 111111   |    1 | ROLE_ADMIN |</span><br><span class=\"line\">| 2  | michael  | 123456   |    2 | ROLE_USER  |</span><br><span class=\"line\">+----+----------+----------+------+------------+</span><br></pre></td></tr></table></figure>\n\n<p>The question is, how to make <code>List&lt;Role&gt;</code> part of <code>User</code>? In other words, how to achieve this using MyBatis?</p>\n<p>When writing <code>mapper.xml</code>, it does not seem to be difficult:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">&lt;!--type should be the full path of your User JavaBean class--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"package.entity.User\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"role\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"package.entitiy.Role\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"roleName\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"roleName\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getAllUsers\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"userMap\"</span>&gt;</span></span><br><span class=\"line\">\tSELECT u.*, r.* FROM tb_user u LEFT JOIN tb_user_role ur ON mr.uid = u.id LEFT JOIN tb_role r ON mr.rid = r.id;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>In Java class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getAllUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, writing Mapper merely using MyBatis Java Annotation can cause more trouble than expected.</p>\n<p>In fact, according to MyBatis official documentation,  <code>collection</code> in XML could not be done by Java Annotation API.</p>\n<blockquote>\n<p>A mapping to a collection property of a complex type. Attributes: select, which is the fully qualified name of a mapped statement (i.e. mapper method) that can load a collection of instances of the appropriate types, fetchType, which supersedes the global configuration parameter lazyLoadingEnabled for this mapping. <strong>NOTE You will notice that join mapping is not supported via the Annotations API. This is due to the limitation in Java Annotations that does not allow for circular references.</strong></p>\n</blockquote>\n<p>There is a workaround, fortunately. And that requires programmers to split a long SQL into parts.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT r.* FROM tb_role r LEFT JOIN tb_user_role ur ON ur.rid=r.id WHERE ur.uid = #&#123;uid&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Role <span class=\"title\">getRoleByUserId</span><span class=\"params\">(String uid)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT * FROM tb_user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(id=<span class=\"string\">\"userMap\"</span>, values=&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"id\"</span>, property=<span class=\"string\">\"id\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"username\"</span>, property=<span class=\"string\">\"username\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"password\"</span>, property=<span class=\"string\">\"password\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"id\"</span>, property=<span class=\"string\">\"role\"</span>, javaType=<span class=\"string\">\"package.entity.Role\"</span>, one=<span class=\"meta\">@One</span>(select =<span class=\"string\">\"getRoleByUserId\"</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getAllUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The highlight of the code is <code>@One</code>. It accepts parameters from <code>id</code> passed from <code>tb_user</code> and calls methods <code>getRoleByUserId</code>, which after commit returns the <code>Role</code> object we want and passes to <code>User</code>object. Now it should be working!</p>\n<p>By the way, if  <code>role</code> is a <code>List</code>, or <code>private List&lt;Role&gt; role</code>, then some adjustments have to be made. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT r.* FROM tb_role r LEFT JOIN tb_user_role ur ON ur.rid=r.id WHERE ur.uid = #&#123;uid&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;Role&gt; <span class=\"title\">getRolesByUserId</span><span class=\"params\">(String uid)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT * FROM tb_user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(id=<span class=\"string\">\"userMap\"</span>, values=&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"id\"</span>, property=<span class=\"string\">\"id\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"username\"</span>, property=<span class=\"string\">\"username\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"password\"</span>, property=<span class=\"string\">\"password\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@Result</span>(column=<span class=\"string\">\"id\"</span>, property=<span class=\"string\">\"role\"</span>, javaType=<span class=\"string\">\"package.entity.Role\"</span>, many=<span class=\"meta\">@Many</span>(select =<span class=\"string\">\"getRolesByUserId\"</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getAllUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> As you can see, <code>one</code> and <code>@One</code> are replaced by <code>many</code> and <code>@Many</code>. Based on experience, <code>@Many</code> is used more frequently, because in most cases the reference of a JavaBean object holds is a collection or container(i.e., <code>List</code>,<code>Map</code>,<code>Set</code>).</p>\n","prev":{"title":"Java Stream VS Kotlin API","link":"2020/08/20/Java-Stream-VS-Kotlin-API"},"next":{"title":"Apps to Make Your iPad Pro a Developer Tool","link":"2020/04/29/Tool"},"plink":"https://git.michaelsblog.top/2020/08/01/MyBatis-Java-Annotation/"}