{"title":"Funny Features of JavaScript(3)","date":"2020-03-04T14:16:54.000Z","date_formatted":{"ll":"Mar 4, 2020","L":"03/04/2020","MM-DD":"03-04"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/03/04/c855fef5fe9af.jpg?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/03/04/Funny-Features-of-JavaScript-3","tags":["JavaScript"],"categories":["Programming"],"updated":"2020-03-05T06:48:57.767Z","content":"<h3 id=\"explicit-explanation\">Explicit Explanation<a href=\"#explicit-explanation\" title=\"Explicit Explanation\"></a></h3><p>Many jokes about JavaScript is originated from its ambiguous operator <code>+</code>.  Just like what I describe in the last passage, where I mention <code>toString()</code> and <code>valueOf()</code>.</p>\n<p>In JavaScript, the operator <code>+</code>  could  be used to:</p>\n<ol><li>Concatenate strings. Binary operand.</li>\n<li>Calculate the sum. Binary operand.</li>\n<li>Get the positive value. Unary operand.</li>\n</ol><p>Sometimes it is hard to tell whether the operation is concatenation or calculation, because JavaScript engine deals with the operands depending on their types. Nobody can tell what <code>var a=b+c;</code> actually do just by this single line of code. </p>\n<p>Let’s see what’s under the hood.</p>\n<p>There is a method <code>ToPrimitive(input, PreferredType?)</code> inside JavaScript Engine. It functions to convert <code>input</code> into a primitive. If <code>PreferredType</code> is <code>Number</code>, then the conversion follows these steps:</p>\n<ol><li>If the input is already a primitive. return itself.</li>\n<li>If the input is an object, call <code>valueOf()</code>. return the result if it’s a primitive.</li>\n<li>If the input is an object, but the result of <code>valueOf()</code> is not primitive, call <code>toString()</code>, return if it’s a primitive.</li>\n<li>If the input does not fit any condition above, throw <code>TypeError</code></li>\n</ol><p>When <code>PreferredType</code> is <code>String</code>, <code>toString()</code> will be called before <code>valueOf()</code>.</p>\n<p>If <code>PreferredType</code> is undefined, Date-type object will be converted to <code>String</code>, others to <code>Number</code>.</p>\n<h3 id=\"tonumber\">ToNumber<a href=\"#tonumber\" title=\"ToNumber\"></a></h3><p>The table demonstrates the result of <code>toNumber()</code></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>Parameter Type</th><th>Result</th></tr>\n</thead><tbody><tr>\n<td>undefined</td><td>NaN</td></tr>\n<tr>\n<td>null</td><td>0</td></tr>\n<tr>\n<td>boolean</td><td>true 1, false 0</td></tr>\n<tr>\n<td>number</td><td>itself</td></tr>\n<tr>\n<td>string</td><td>if string is composed by numbers, parse to number; else return NaN</td></tr>\n</tbody></table></div></div><h3 id=\"tostring\">ToString<a href=\"#tostring\" title=\"ToString\"></a></h3><p>The table demonstrates the result of <code>toString()</code>.</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>Input Type</th><th>Result</th></tr>\n</thead><tbody><tr>\n<td>undefined</td><td>“undefined”</td></tr>\n<tr>\n<td>null</td><td>“null”</td></tr>\n<tr>\n<td>boolean</td><td>“true”/“false”</td></tr>\n<tr>\n<td>number</td><td>number as string</td></tr>\n<tr>\n<td>string</td><td>itself</td></tr>\n</tbody></table></div></div><h3 id=\"principles\">Principles<a href=\"#principles\" title=\"Principles\"></a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = b + c;</span><br></pre></td></tr></table></figure>\n\n<ol><li>Convert both operands to their primitive value, <code>PreferredType</code> is set undefined by default.</li>\n<li>If one of the operand’s primitive ‘is string, then do concatenation.</li>\n<li>Otherwise convert both operands to numbers and calculate their sum.</li>\n</ol><p>The principles is applicable under almost all circumstances. </p>\n<p>This explains why:</p>\n<p><code>true+true+true===1</code>: First of all, <code>true</code> is a primitive. Since <code>PreferredType</code> is undefined, all type(except <code>Date</code>) are converted to numbers. <code>true</code> is converted to 1, and hence the result.</p>\n<p><code>9+&quot;1&quot;==&quot;91&quot;</code>: The primitive value of “1” is “1”, a string, hence concatenating. (Principle 2)</p>\n<p><code>(!+[]+[]+![]).length ===9</code>:  Analyze it step by step. <code>!+[]</code> means <code>NOT +[]</code>, that is <code>NOT 0</code>, or, <code>true</code>. <code>true+[]</code>: <code>[]</code> is an Array object, try call <code>valueOf</code>, get <code>[]</code>. This is not a primitive, so try call <code>toString()</code>, and get <code>&quot;&quot;</code>. <code>true+&quot;&quot;</code> results in concatenation of the two. Now the result is <code>&quot;true&quot;</code>.  <code>![]</code> means <code>NOT []</code>, that is <code>NOT true</code>, or, <code>false</code>. <code>&quot;true&quot;+false</code>  is a process of concatenation as well. At last, we get <code>&quot;truefalse&quot;</code>, which is a string with 9 characters. </p>\n<p><code>[]==0</code>: <code>[]</code> will convert itself to number, hence 0. You can even find that <code>[]==![]</code>, the right is actually boolean <code>false</code>, and <code>false</code> is converted to number 0.</p>\n<p><code>[]+[]</code>, <code>[]+{}</code> and such: Obviously now. <code>{}+{}</code> may be a little exception. I explained it the other post.</p>\n<p>However, operator <code>-</code> either  calculates the submission of the two operands, or get the negative number of the operand. So for <code>true-true</code>, both <code>true</code> are converted to number 1, and 1-1=0. <code>91-&quot;1&quot;==90</code> can be explained similarly.</p>\n<p>If all these explanation above make you puzzled, I draw this flow chart about the process <code>a+b</code> to make it better understand. Date as a special type is not considered. You’ll just need to remember that for Date type, call <code>toString</code> first.</p>\n<p><img src=\"https://img.cdn.n3ko.co/lsky/2020/02/24/cec06bfe7d01a.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp\" class=\"φcy\" alt=\"flow.png\"></p>\n<p>It took me three days trying to understand these <strong><em>funny</em></strong> features. 凸(艹皿艹 )  <em>Thanks</em> for inventing JavaScript!  </p>\n","next":{"title":"How I Beautify My PowerShell in Windows Terminal","link":"2020/02/29/How-I-Beautify-My-PowerShell"},"plink":"https://git.michaelsblog.top/2020/03/04/Funny-Features-of-JavaScript-3/","toc":[{"id":"explicit-explanation","title":"Explicit Explanation","index":"1"},{"id":"tonumber","title":"ToNumber","index":"2"},{"id":"tostring","title":"ToString","index":"3"},{"id":"principles","title":"Principles","index":"4"}]}