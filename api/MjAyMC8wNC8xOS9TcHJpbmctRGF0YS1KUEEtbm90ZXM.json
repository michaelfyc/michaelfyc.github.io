{"title":"Spring Data JPA Note","date":"2020-04-19T07:19:14.000Z","date_formatted":{"ll":"Apr 19, 2020","L":"04/19/2020","MM-DD":"04-19"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/04/19/733b33a402ba1.jpg?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/04/19/Spring-Data-JPA-notes","comments":true,"tags":["Java","Spring"],"categories":["Programming"],"updated":"2020-04-24T14:09:45.177Z","content":"<h2 id=\"differences-between-jpa-hibernate-and-spring-data-jpa\">Differences between JPA, Hibernate, and Spring Data JPA<a href=\"#differences-between-jpa-hibernate-and-spring-data-jpa\" title=\"Differences between JPA, Hibernate, and Spring Data JPA\"></a></h2><blockquote>\n<p>Reference: <a href=\"https://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference\" target=\"_blank\">https://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference</a></p>\n</blockquote>\n<p> <strong>JPA</strong> stands for <strong>J</strong>ava <strong>P</strong>ersistence <strong>A</strong>PI. It is an specification proposed by Sun Company. It is not an ORM framework. JPA itself provides no concrete implementation.</p>\n<p>Hibernate is an ORM framework that implements JPA specification.</p>\n<p>Spring Data JPA, according to documentation, “reduces the effort to implement data access layers for various persistence stores significantly”. It provides a definition to implement repositories that are supported under the hood by referencing the JPA specification, using the provider you define. It means you may use Hibernate, TopLink, OpenJPA, or other ORM framework, as long as it follows JPA specification.</p>\n<h2 id=\"regular-procedures\">Regular Procedures<a href=\"#regular-procedures\" title=\"Regular Procedures\"></a></h2><blockquote>\n<p>Options Reference: <a href=\"http://www.java2s.com/Tutorials/Java/JPA/index.htm\" target=\"_blank\">http://www.java2s.com/Tutorials/Java/JPA/index.htm</a></p>\n</blockquote>\n<ol><li><p>Add relevant dependencies:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--pom.xml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Enable JPA Repositories on Main class.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// It is recommended to specify base packages</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJPARepositories</span>(basePackages=<span class=\"string\">\"com.michael.demo.repositories\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Specify configuration in <code>application.yml</code>/<code>applicaton.properties</code>. I prefer in YAML format.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/test</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">username</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">password</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.zaxxer.hikari.HikariDataSource</span> <span class=\"comment\"># Or druid, if you want to</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span> <span class=\"comment\"># for better logging</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">    <span class=\"attr\">database-platform:</span> <span class=\"string\">org.hibernate.dialect.MySQL8Dialect</span> </span><br><span class=\"line\">    <span class=\"comment\"># specify a dialect. I'm using MySQL8</span></span><br></pre></td></tr></table></figure>\n\n<p> DDL(stands for <strong>D</strong>ata <strong>D</strong>efinition <strong>L</strong>anguage)-auto options:</p>\n<p>none: Do nothing.</p>\n<p>create: Create new tables. If tables already exist, drop the original tables.</p>\n<p>create-drop: Drop the tables on exiting.</p>\n<p><strong>update</strong>(Recommended): Alter the table structure if the fields are different from that of existed tables, otherwise do nothing.</p>\n<p>validate: Throw error if structure is different from the existed table’s structure. </p>\n</li>\n<li><p>Create corresponding entities classes and repository interfaces.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_student\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sid;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@Entity</code> is required. In IDEA, you’ll have to assign persistence type.</p>\n<p><code>@Id</code> is used to specify primary key. </p>\n<p><code>@GeneratedValue</code> is used to describe primary key.</p>\n<p>The enumeration of <code>GenerationType</code> includes:</p>\n<p>TABLE:  Store the primary key in a certain table, usually partner with <code>@TableGenerator</code></p>\n<p>IDENTITY: auto-increment for most databases</p>\n<p>SEQUENCE: Resemble to auto-increment but for databases that doesn’t support (Oracle, for example). Usually partner with <code>@SequenceGenerator</code>.</p>\n<p>AUTO: default type. Strategy is chosen among the three types above by persistence engine.</p>\n<p><code>@Column</code> corresponds to table fields.</p>\n<p>If the entity class includes other reference, then <code>@OnetoOne</code>/<code>@ManyToOne</code>/<code>@ManytoMany</code> and <code>@JoinTable</code>/<code>@JoinColumn</code> is needed.</p>\n<p>For instance:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.entity.School;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_student\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sid;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JoinTable</span>(<span class=\"string\">\"tb_school\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> School school;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Be aware that JPA would create foreign keys to link the tables by default</strong> . If you don’t want any foreign key, you should tell JPA to remove the constraint:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.entity.School;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name=<span class=\"string\">\"tb_student\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sid;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JoinTable</span>(<span class=\"string\">\"tb_school\"</span>,foreignKey=</span><br><span class=\"line\">               <span class=\"meta\">@ForeignKey</span>(name=<span class=\"string\">\"none\"</span>,value=ConstraintMode.NO_CONSTRAINT))</span><br><span class=\"line\">    <span class=\"keyword\">private</span> School school;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can add other constraints on the columns, such as <code>unique</code>,<code>nullable</code>, <code>length</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">username in database: VARCHAR(26) UNQIUE NOT NULL;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Column</span>(unique=<span class=\"keyword\">true</span>,nullable=<span class=\"keyword\">false</span>,length=<span class=\"number\">26</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String username;</span><br></pre></td></tr></table></figure>\n\n<p>Sometimes the column field is float/double type, and you want to specify precision scale.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Column</span>(precision=<span class=\"number\">8</span>,scale=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> Float rate;</span><br></pre></td></tr></table></figure>\n\n<p>One other common demand is time format transferring. JPA offers these options to make your development easier.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** If you're using java.sql.Date*/</span></span><br><span class=\"line\"><span class=\"meta\">@Column</span>(columnDefinition=<span class=\"string\">\"DATE\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> java.sql.Date startDate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Temporal</span>(TemporalType.DATE)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> java.util.Calendar endDate;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/** If you want to map java.util.Date type to TIME type in Database*/</span></span><br><span class=\"line\">   <span class=\"meta\">@Temporal</span>(Temporal.TIME)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> java.util.Date startDate;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/** If you want to map java.util.Date type to TIMESTAMP type in Database*/</span></span><br><span class=\"line\">   <span class=\"meta\">@Temporal</span>(Temporal.TIMESTAMP)</span><br><span class=\"line\">   <span class=\"keyword\">private</span> java.util.Date startDate;</span><br></pre></td></tr></table></figure>\n\n<p>If you can’t remember these annotation options, <code>columnDefinition</code> would be most suitable.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Column</span>(columnDefinition=<span class=\"string\">\"VARCHAR(26) UNIQUE NOT NULL DEFAULT 'John'\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n\n<p>In addition, if you don’t want a property to be the column of the table, do use <code>@Transient</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transient</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String convertedName;</span><br></pre></td></tr></table></figure>\n\n<p>Back to repository.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo.repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.entity.Student;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Student</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">List&lt;Student&gt; <span class=\"title\">getStudentsByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Some common repository interfaces are provided to be extended.<br><code>Repository&lt;T,ID&gt;</code>: <code>T</code> is the entity type, <code>ID</code> is the type of the primary key. It provides no methods. </p>\n<p><code>JpaRepository&lt;T,ID&gt;</code>: <strong>Recommended</strong>. It extends <code>QueryByExampleExecutor&lt;T&gt;</code>, and hence provides more powerful methods.</p>\n<p><code>CrudRepository&lt;T,ID&gt;</code>: Provides simple basic CRUD methods.</p>\n<p><code>PagingAndSortingRepository&lt;T,ID&gt;</code>: Provides sorting and pagination methods as its name implies.</p>\n<h3 id=\"some-query-method-specification\">Some Query Method Specification<a href=\"#some-query-method-specification\" title=\"Some Query Method Specification\"></a></h3><blockquote>\n<p>Detail Reference: <a href=\"https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html\" target=\"_blank\">https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html</a></p>\n</blockquote>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>Method Name</th><th>SQL</th></tr>\n</thead><tbody><tr>\n<td>find..By.. / read..By.. / query..By.. / get..By..</td><td>SELECT .. WHERE ..</td></tr>\n<tr>\n<td>count..By</td><td>SELECT count(…) .. WHERE ..</td></tr>\n<tr>\n<td>..OrderBy..[Asc/ Desc]</td><td>WHERE … order by .. [asc/ desc]</td></tr>\n<tr>\n<td>and / or/ IgnoreCase</td><td>WHERE … AND/OR ..</td></tr>\n<tr>\n<td>Top/ First / Distinct</td><td>TOP / FIRST / DISTINCT</td></tr>\n<tr>\n<td>….</td><td></td></tr>\n</tbody></table></div></div><p>As you can see, some methods like <code>top</code> and <code>first</code> are not supported by all DBMS. There is no need to worry about because Spring Data JPA will help us interpret them into corresponding dialect. That’s why specifying dialect and database so important in configuration. </p>\n<p>Sometimes the method name is too long because of the demanding constraints, and may reduce the granularity. With Hibernate, you can write Hibernate Query Language (HQL) and Java Persistence Query Language (JPQL),  both of which are object model focused query languages similar in nature to SQL. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo.repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.entity.Student;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Student</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">List&lt;Student&gt; <span class=\"title\">getStudentsByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"meta\">@Query</span>(<span class=\"string\">\"SELECT sid,sname,school FROM Student WHERE name=:name AND school.school='Engineer' \"</span>)</span><br><span class=\"line\">    \t<span class=\"function\">User <span class=\"title\">getEngineerStudentByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Details can be found in documents.</p>\n</li>\n<li><p>Create Service classes. By convention, a service interface is created beforehand. Here the interface is omitted since without implementing interfaces still works fine.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.repository.StudentRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StudentRepository studentRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * save method is provided by interface JpaRepository</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> student Student Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor=Exception<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">saveStudent</span>(<span class=\"title\">Student</span> <span class=\"title\">student</span>)</span>&#123;</span><br><span class=\"line\">       studentRepository.save(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name Student's name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> List&lt;Student&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getStudentByName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentRepository.getStudentsByName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Try unit test or use it in Controller.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.michael.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.entity.Student;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.michael.demo.service.StudentService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpaApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    StudentService studentService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Student student=<span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        student.setName(<span class=\"string\">\"Luke\"</span>);</span><br><span class=\"line\">        studentService.saveStudent(student);</span><br><span class=\"line\">        List&lt;Student&gt; studentList=studentService.getStudentssByName(<span class=\"string\">\"Luke\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Student s:studentList)&#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The test should pass and a record should be found in table <code>tb_student</code> database <code>test</code>.</p>\n</li>\n</ol><h2 id=\"common-problems-encountered-in-development\">Common Problems Encountered in Development<a href=\"#common-problems-encountered-in-development\" title=\"Common Problems Encountered in Development\"></a></h2><h3 id=\"columnnamequottb_studentquot-error-in-idea\"><code>@Column(name=&quot;tb_student&quot;)</code> error in IDEA<a href=\"#columnnamequottb_studentquot-error-in-idea\" title=\"@Column(name=&quot;tb_student&quot;) error in IDEA\"></a></h3><p>This happens if you have not assigned the class to any data source. It could also happen when the table with the name does not exist, even though you assign DDL-auto value to <code>create</code>. This is quite annoying, but somehow works as a warning.</p>\n","prev":{"title":"Spring Session Note","link":"2020/04/24/Spring-Session-Note"},"next":{"title":"Fun Fact: Why add `1=1` in SQL Query Conditions?","link":"2020/04/17/Why-1-1"},"plink":"https://git.michaelsblog.top/2020/04/19/Spring-Data-JPA-notes/","toc":[{"id":"differences-between-jpa-hibernate-and-spring-data-jpa","title":"Differences between JPA, Hibernate, and Spring Data JPA","index":"1"},{"id":"regular-procedures","title":"Regular Procedures","index":"2","children":[{"id":"some-query-method-specification","title":"Some Query Method Specification","index":"2.1"}]},{"id":"common-problems-encountered-in-development","title":"Common Problems Encountered in Development","index":"3","children":[{"id":"columnnamequottb_studentquot-error-in-idea","title":"@Column(name&#x3D;&quot;tb_student&quot;) error in IDEA","index":"3.1"}]}]}