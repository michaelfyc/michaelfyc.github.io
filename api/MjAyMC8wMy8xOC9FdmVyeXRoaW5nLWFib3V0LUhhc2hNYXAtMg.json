{"title":"Everything about HashMap(2)","date":"2020-03-18T11:39:59.000Z","date_formatted":{"ll":"Mar 18, 2020","L":"03/18/2020","MM-DD":"03-18"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/03/17/4094fa0d49806.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/03/18/Everything-about-HashMap-2","comments":true,"tags":["Java"],"categories":["Programming"],"updated":"2020-03-18T11:44:28.284Z","content":"<h2 id=\"hashmap-initialization\">HashMap Initialization<a href=\"#hashmap-initialization\" title=\"HashMap Initialization\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The default initial capacity - MUST be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">// aka 16</span></span><br></pre></td></tr></table></figure>\n\n<p>The default <strong>capacity</strong> of HashMap is 16.   Capacity is the length of array.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;   </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                               loadFactor);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>If the size is specified, then the capacity would be the smallest value of the power of 2 that is larger than specified size.</p>\n<p>e.g., the size is 5, then the capacity in the beginning is set 8. If the size is 21, the capacity is set 32.</p>\n<p>As the source code demonstrates:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = cap -<span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n&gt;&gt;&gt;<span class=\"number\">2</span>;</span><br><span class=\"line\">    n |= n&gt;&gt;&gt;<span class=\"number\">4</span>;</span><br><span class=\"line\">    n |= n&gt;&gt;&gt;<span class=\"number\">8</span>;</span><br><span class=\"line\">    n |= n&gt;&gt;&gt;<span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n&lt;<span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPICITY : n+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hash-method-amp-index\">Hash Method &amp; Index<a href=\"#hash-method-amp-index\" title=\"Hash Method &amp; Index\"></a></h2><p>The hash method:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The find-index method:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bucketIndex = indexFor(hash, table.length);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"why-hamplength-1\">Why <code>h&amp;(length-1)</code>?<a href=\"#why-hamplength-1\" title=\"Why h&amp;(length-1)?\"></a></h3><p>First of all, it’s inappropriate to simply return <code>key.hashCode()</code>. <code>key.hashCode</code> covers a large range, since it could be any positive integers, from 1 to 2147483647(the hash code of <code>null</code> is 0). Obviously, the capacity of array is limited. And the default capacity is barely 16. Therefore, modulo operation is required. Considering efficiency, bit operations are faster than commonly-used <code>%</code>. The remainder of modulo operation should be the index.</p>\n<h3 id=\"why-hkeyhashcodehgtgtgt16\">Why <code>h=key.hashCode()^(h&gt;&gt;&gt;16)</code>?<a href=\"#why-hkeyhashcodehgtgtgt16\" title=\"Why h=key.hashCode()^(h&gt;&gt;&gt;16)?\"></a></h3><p>The goal of hash method is:</p>\n<ol><li>Lower the probability of hash collision as much as as possible.</li>\n<li>Ensure high-efficiency, because it’s called frequently.</li>\n</ol><p>16 here does not refer to the default capacity. Instead, 16 is a half of 32, the length of int. The exclusive-or operation functions to make the result more random, reducing the times of hash collision.</p>\n","prev":{"title":"Everything about HashMap(3)","link":"2020/03/18/Everything-about-HashMap-3"},"next":{"title":"Everything about HashMap(1)","link":"2020/03/16/Everything-about-HashMap-1"},"plink":"https://git.michaelsblog.top/2020/03/18/Everything-about-HashMap-2/","toc":[{"id":"hashmap-initialization","title":"HashMap Initialization","index":"1"},{"id":"hash-method-amp-index","title":"Hash Method &amp; Index","index":"2","children":[{"id":"why-hamplength-1","title":"Why h&amp;(length-1)?","index":"2.1"},{"id":"why-hkeyhashcodehgtgtgt16","title":"Why h&#x3D;key.hashCode()^(h&gt;&gt;&gt;16)?","index":"2.2"}]}]}