{"title":"Kotlin Delegation & Examples","date":"2020-10-10T12:58:39.000Z","date_formatted":{"ll":"Oct 10, 2020","L":"10/10/2020","MM-DD":"10-10"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/10/10/6568734729eeb.jpg?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/10/10/Kotlin-Delegation-Examples","comments":true,"tags":["Delegation","Kotlin"],"categories":["Programming"],"updated":"2020-10-10T12:58:39.123Z","content":"<p>Delegation is a concept mostly used in Apple’s Objective-C and Swift, and Microsoft C#. Kotlin as a young language also has delegation, but rather different from others. Take C# as example, <code>delegate</code> is a keyword. <code>Delegate</code> is an actual type. However here in Kotlin, <code>delegate</code> is neither a keyword nor a type. In Kotlin, you either delegates a method or a property. </p>\n<h2 id=\"delegating-methods\">Delegating Methods<a href=\"#delegating-methods\" title=\"Delegating Methods\"></a></h2><p>Unlike delegation in C#, you have to explicitly implement the same interface as delegated class in Kotlin. </p>\n<p>Say here’s a Plane class that implements IFly interface:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IFly</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plane</span></span>(<span class=\"keyword\">var</span> flightId:<span class=\"built_in\">Int</span>):IFly&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Flight id:<span class=\"variable\">$flightId</span> flies in the air\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we want delegate military planes to conduct the flight:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MilitaryPlane</span></span>(<span class=\"keyword\">val</span> flyingObject:IFly):IFly <span class=\"keyword\">by</span> flyingObject&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Military forces take over\"</span>)</span><br><span class=\"line\">        flyingObject.fly()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> plane = Plane(<span class=\"number\">10056</span>)</span><br><span class=\"line\">    MilitaryPlane(plane).fly()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Military forces take over</span><br><span class=\"line\">Flight id:10056 flies in the air</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delegate-properties\">Delegate Properties<a href=\"#delegate-properties\" title=\"Delegate Properties\"></a></h2><h3 id=\"lazy\">Lazy<a href=\"#lazy\" title=\"Lazy\"></a></h3><p>Lazy properties enables the value to get computed only upon first access.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">var</span> name:String,<span class=\"keyword\">var</span> password:String)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> id:String <span class=\"keyword\">by</span> lazy&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Fetching User Id...\"</span>)</span><br><span class=\"line\">        fetchIdFromDB(name,password)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateKey</span><span class=\"params\">()</span></span>:String&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"variable\">$name</span>@<span class=\"variable\">$password</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toString</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User(id='<span class=\"variable\">$id</span>',name='<span class=\"variable\">$name</span>', password='<span class=\"variable\">$password</span>')\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchIdFromDB</span><span class=\"params\">(username:<span class=\"type\">String</span>,password:<span class=\"type\">String</span>)</span></span>:String&#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>) <span class=\"comment\">//simulate database operation time-elapse</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"u001\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> user = User(<span class=\"string\">\"Arthur\"</span>,<span class=\"string\">\"Dyle\"</span>)</span><br><span class=\"line\">    println(user.generateKey())</span><br><span class=\"line\">    println(user)</span><br><span class=\"line\">    println(user)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arthur@Dyle</span><br><span class=\"line\">Fetching User Id...</span><br><span class=\"line\">User(id&#x3D;&#39;u001&#39;,name&#x3D;&#39;Arthur&#39;, password&#x3D;&#39;Dyle&#39;)</span><br><span class=\"line\">User(id&#x3D;&#39;u001&#39;,name&#x3D;&#39;Arthur&#39;, password&#x3D;&#39;Dyle&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>As is shown above, method <code>fetchIdFromDB()</code> is not called unless property <code>id</code> is needed. And ever since the property <code>id</code> has been initialized, it will not call <code>fetchIdFromDB()</code> anymore. This quickens the class construction, and saves loading resource. It can also be used for local variables in a block or function.</p>\n<h3 id=\"observable\">Observable<a href=\"#observable\" title=\"Observable\"></a></h3><p>Observable properties register listeners to get notified about changes to this property.</p>\n<p>We can set up a simple Publish/Subscribe pattern using <code>Delegates.observable</code>:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Publisher</span></span>(<span class=\"keyword\">data</span>:String)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscriberList:List&lt;Subscriber&gt; <span class=\"keyword\">by</span> Delegates.observable(listOf())&#123;</span><br><span class=\"line\">        _,_,newValue-&gt; </span><br><span class=\"line\">        println(<span class=\"string\">\"Newest subscriber: <span class=\"subst\">$&#123;newValue.last().name&#125;</span>. Subscriber Num: <span class=\"subst\">$&#123;subscriberList.size&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Notify all subscribers if ever content has changed</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> content:String <span class=\"keyword\">by</span> Delegates.observable(<span class=\"keyword\">data</span>)&#123;</span><br><span class=\"line\">        _,_,_-&gt;</span><br><span class=\"line\">        println(<span class=\"string\">\"New content published.\"</span>)</span><br><span class=\"line\">        notifySubscribers()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">notifySubscribers</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(subscriber <span class=\"keyword\">in</span> subscriberList)&#123;</span><br><span class=\"line\">            subscriber.notified()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subscriber</span></span>(<span class=\"keyword\">var</span> name:String)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> publisher:Publisher?=<span class=\"literal\">null</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//Subscriber read content whenever the content has changed</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> content:String <span class=\"keyword\">by</span> Delegates.observable(<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">        _,_,newValue-&gt; println(<span class=\"string\">\"Subscriber <span class=\"variable\">$name</span> receives: '<span class=\"subst\">$&#123;publisher.content&#125;</span>'.\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">subscribe</span><span class=\"params\">(publisher:<span class=\"type\">Publisher</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.publisher = publisher</span><br><span class=\"line\">        <span class=\"comment\">//Observable cannot listen collection element change</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.publisher!!.subscriberList += listOf(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = publisher.content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">notified</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = publisher.content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> NYTimes = Publisher(<span class=\"string\">\"Kotlin published its latest release.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> readerA = Subscriber(<span class=\"string\">\"Andy\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> readerB = Subscriber(<span class=\"string\">\"Bob\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> readerC = Subscriber(<span class=\"string\">\"Catherine\"</span>)</span><br><span class=\"line\">    readerA.subscribe(NYTimes)</span><br><span class=\"line\">    readerB.subscribe(NYTimes)</span><br><span class=\"line\">    NYTimes.content = <span class=\"string\">\"Jetbrains is working on new IDE.\"</span></span><br><span class=\"line\">    readerC.subscribe(NYTimes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Newest subscriber: Andy. Subscriber Num: 1</span><br><span class=\"line\">Subscriber Andy receives: &#39;Kotlin published its latest release&#39;.</span><br><span class=\"line\">Newest subscriber: Bob. Subscriber Num: 2</span><br><span class=\"line\">Subscriber Bob receives: &#39;Kotlin published its latest release&#39;.</span><br><span class=\"line\">New content published.</span><br><span class=\"line\">Subscriber Andy receives: &#39;Jetbrains is working on new IDE&#39;.</span><br><span class=\"line\">Subscriber Bob receives: &#39;Jetbrains is working on new IDE&#39;.</span><br><span class=\"line\">Newest subscriber: Catherine. Subscriber Num: 3</span><br><span class=\"line\">Subscriber Catherine receives: &#39;Jetbrains is working on new IDE&#39;.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"storing-properties-in-a-map\">Storing properties in a map<a href=\"#storing-properties-in-a-map\" title=\"Storing properties in a map\"></a></h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutableUser</span></span>(<span class=\"keyword\">val</span> map: MutableMap&lt;String, Any?&gt;)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> map</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">val</span> user = User(mapOf(</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span> to <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>  to <span class=\"number\">25</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\">    println(user.name) <span class=\"comment\">// Prints \"John Doe\"</span></span><br><span class=\"line\">    println(user.age)  <span class=\"comment\">// Prints 25</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It makes initializing easier.</p>\n","prev":{"title":"Channel in Kotlin & Golang","link":"2020/10/16/Channel-in-Kotlin-Golang"},"next":{"title":"Java Stream VS Kotlin API","link":"2020/08/20/Java-Stream-VS-Kotlin-API"},"plink":"https://git.michaelsblog.top/2020/10/10/Kotlin-Delegation-Examples/","toc":[{"id":"delegating-methods","title":"Delegating Methods","index":"1"},{"id":"delegate-properties","title":"Delegate Properties","index":"2","children":[{"id":"lazy","title":"Lazy","index":"2.1"},{"id":"observable","title":"Observable","index":"2.2"}]},{"id":"storing-properties-in-a-map","title":"Storing properties in a map","index":"3"}]}