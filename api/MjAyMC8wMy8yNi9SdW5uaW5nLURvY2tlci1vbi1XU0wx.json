{"title":"Running Docker on WSL1","date":"2020-03-26T09:10:41.000Z","date_formatted":{"ll":"Mar 26, 2020","L":"03/26/2020","MM-DD":"03-26"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/03/26/135f63614dcca.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/03/26/Running-Docker-on-WSL1","comments":true,"tags":["tips"],"categories":["Programming"],"updated":"2020-03-31T11:04:22.940Z","content":"<blockquote>\n<p>Partial Reference: <a href=\"https://www.jianshu.com/p/20ebdbf68744\" target=\"_blank\">https://www.jianshu.com/p/20ebdbf68744</a> </p>\n</blockquote>\n<p>​    Windows Subsystem for Linux(WSL) is fairly nice. It works like a real Linux, but because its kernel is based on Windows, something just won’t work properly as native Linux. Let’s take docker for instance.</p>\n<p>​    My WSL version is Ubuntu 18.04 LTS. I followed barely every step from docker official documentation, except for some substitution in source sites. </p>\n<p>​    The first issue jumped out when I tried to execute <code>systemctl start docker</code>. <code>Permisson failed.</code> So I added <code>sudo</code> in the very front and now it told me that <code>System has not been booted with systemd as init system(PID 1).Can&#39;t operate.</code> Fine, after all this is a Linux running on Windows. This is understandable. </p>\n<p>​    The solution is: <code>sudo service docker start</code>. Now it said <code>Starting Docker:docker [OK]</code>. Wow, how great is that. Nevertheless, when I executed <code>docker images</code>, it prompted: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure>\n\n<p>​    What the heck? You just said it was “OK”!  So I executed <code>sudo service docker status</code> to check out if it accidentally exited, and got <code>docker is not running.</code> </p>\n<p>​    The solution of such is to run WSL as administrator. </p>\n<p>​    Now either <code>docker images</code> or <code>docker ps</code> worked as properly as they were supposed to.  However, <code>docker run hello-world</code> brought a long wrong message. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker:Error response from daemon:OCI runtime create failed: container_linux.go:345: starting container process caused <span class=\"string\">\"process_linux.go:303: getting the final child's pid from pipe caused \\\"EOF\\\"\"</span>: unknown.</span><br></pre></td></tr></table></figure>\n\n<p>​    After undergoing hard time googling, I figured out that it was all because <code>dockerd</code> version was too high. Sure enough, I re-download docker and  <code>dockerd</code> with a much lower version.</p>\n<p>​    Test <code>docker version</code>,<code>docker pull</code>,<code>docker run hello-world</code> , and —worked. </p>\n<p>​    But nuances still remains in some dockers. Such as MySQL and nginx.</p>\n<ol><li><code>docker exec -it &lt;container-name&gt; &lt;exec-param&gt;</code> is not available.  </li>\n</ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OCI runtime error: <span class=\"built_in\">exec</span> failed: container_linux.go:265: starting container process caused <span class=\"string\">\"could not create session key: function not implemented\"</span></span><br></pre></td></tr></table></figure>\n\n<p>It is said that <code>nsenter</code> maybe a good workaround solution. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># replace `docker exec -it nginx sh`</span></span><br><span class=\"line\">sudo nsenter -p -i -u -m -n -t `docker inspect -f &#123;&#123;.State.Pid&#125;&#125; nginx` sh</span><br></pre></td></tr></table></figure>\n\n<p>or to make calling easier, you can write a shell program or function like:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">defining <span class=\"built_in\">functions</span></span></span><br><span class=\"line\">cat &gt;&gt; ~/.bashrc &lt;&lt; \"EOF\"</span><br><span class=\"line\"></span><br><span class=\"line\">function docker-exec &#123;</span><br><span class=\"line\">    name=$1</span><br><span class=\"line\">    shift</span><br><span class=\"line\">    nsenter -p -i -u -m -n -t `docker inspect -f &#123;&#123;.State.Pid&#125;&#125; $&#123;name&#125;` \"$@\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> restart to load new config</span></span><br><span class=\"line\">. ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>so that you can simply run <code>docker-exec nginx sh</code></p>\n<ol><li><p>Lack of permission inside certain docker containers. </p>\n<p>Typical example: MySQL</p>\n<p>This drives me mad, dude. At first, it showed an error message:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux Native AIO interface is not supported on this platform. Please check your OS documentation and install appropriate binary of InnoDB.</span><br></pre></td></tr></table></figure>\n\n<p>According to <strong><code>StackOverflow</code></strong>，append <code>--innodb_use_native_aio = 0</code> parameter. </p>\n<p>And here we are:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run --name test_mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql  --innodb_use_native_aio=0 </span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/docker-entrypoint.sh: line 244: cannot create temp file <span class=\"keyword\">for</span> here-document: Permission denied.</span><br></pre></td></tr></table></figure>\n\n<p>Seriously? I thought I put into superuser group! </p>\n<p>Some claimed that using <code>-v &lt;mount&gt;</code> works.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name test_mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /tmp:/tmp -d mysql --innodb_use_native_aio=0</span><br></pre></td></tr></table></figure>\n\n<p>(It still won’t work..Seeking complete solution)</p>\n<ol><li><p>Communication in containers in unavailable.</p>\n<p>(Man,why would you think two docker containers can link to each other when even a database won’t run?)</p>\n</li>\n</ol></li>\n</ol><p>If only I had a Windows Professional License, I would not waste my precious time on WSL Docker. It is said that WSL2 has better docker support. Nevertheless, I really doubt how much it can do. </p>\n","prev":{"title":"Yes, Minister--A Classic Satire","link":"2020/04/03/Yes-Minister"},"next":{"title":"Everything about HashMap Extra","link":"2020/03/20/Everything-about-HashMap-Extra"},"plink":"https://git.michaelsblog.top/2020/03/26/Running-Docker-on-WSL1/"}