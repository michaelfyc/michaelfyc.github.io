{"title":"Everything about HashMap Extra","date":"2020-03-20T14:01:12.000Z","date_formatted":{"ll":"Mar 20, 2020","L":"03/20/2020","MM-DD":"03-20"},"thumbnail":"https://img.cdn.n3ko.co/lsky/2020/03/17/4094fa0d49806.png?x-oss-process=image/auto-orient,1/quality,q_70/sharpen,200/format,webp","link":"2020/03/20/Everything-about-HashMap-Extra","tags":["Java"],"categories":["Programming"],"updated":"2020-03-20T14:01:12.866Z","content":"<h2 id=\"is-hashmap-sortedif-not-are-there-sorted-maps\">Is HashMap Sorted?If not, are there Sorted Maps?<a href=\"#is-hashmap-sortedif-not-are-there-sorted-maps\" title=\"Is HashMap Sorted?If not, are there Sorted Maps?\"></a></h2><p>Key-Value patterns stored in HashMap is not unsorted, while <strong>LinkedHashMap</strong> and <strong>TreeMap</strong> are sorted.</p>\n<h3 id=\"differences-between-linkedhashmap-and-treemap\">Differences between LinkedHashMap and TreeMap<a href=\"#differences-between-linkedhashmap-and-treemap\" title=\"Differences between LinkedHashMap and TreeMap\"></a></h3><p>They are implemented in different ways. </p>\n<p>There is a list in LinkedHashMap, each node of which contains two attributes, before and after, and thus a sequence is formed. </p>\n<p>Code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class=\"line\"><span class=\"keyword\">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//append the node to the tail</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkNodeLast</span><span class=\"params\">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">  LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class=\"line\">  tail = p;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    head = p;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    p.before = last;</span><br><span class=\"line\">    last.after = p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//LinkedHashMap node</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HashMap</span>.<span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">  Entry&lt;K,V&gt; before, after;</span><br><span class=\"line\">  Entry(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(hash, key, value, next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TreeMap, on the other hand, extends SortedMap that accepts a Comparator. Unlike HashMap, TreeMap maintains barely a red-black tree. The tree is forced to maintain as a balance binary tree after a new node is inserted or deleted.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; t = root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            compare(key, key); <span class=\"comment\">// type (and possibly null) check</span></span><br><span class=\"line\"></span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> Entry&lt;&gt;(key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            size = <span class=\"number\">1</span>;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp;</span><br><span class=\"line\">        Entry&lt;K,V&gt; parent;</span><br><span class=\"line\">        <span class=\"comment\">// split comparator and comparable paths</span></span><br><span class=\"line\">        Comparator&lt;? <span class=\"keyword\">super</span> K&gt; cpr = comparator;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cpr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                parent = t;</span><br><span class=\"line\">                cmp = cpr.compare(key, t.key);</span><br><span class=\"line\">               <span class=\"comment\">//keep balance</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    t = t.left;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">                    t = t.right;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> t.setValue(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (t != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Make key comparable</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                Comparable&lt;? <span class=\"keyword\">super</span> K&gt; k = (Comparable&lt;? <span class=\"keyword\">super</span> K&gt;) key;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                parent = t;</span><br><span class=\"line\">                cmp = k.compareTo(t.key);</span><br><span class=\"line\">              <span class=\"comment\">//...more</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//call compare/compareTo depending on whether there is a specified comparator</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object k1, Object k2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> comparator==<span class=\"keyword\">null</span> ? ((Comparable&lt;? <span class=\"keyword\">super</span> K&gt;)k1).compareTo((K)k2)</span><br><span class=\"line\">            : comparator.compare((K)k1, (K)k2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","prev":{"title":"Running Docker on WSL1","link":"2020/03/26/Running-Docker-on-WSL1"},"next":{"title":"Everything about HashMap(3)","link":"2020/03/18/Everything-about-HashMap-3"},"plink":"https://git.michaelsblog.top/2020/03/20/Everything-about-HashMap-Extra/","toc":[{"id":"is-hashmap-sortedif-not-are-there-sorted-maps","title":"Is HashMap Sorted?If not, are there Sorted Maps?","index":"1","children":[{"id":"differences-between-linkedhashmap-and-treemap","title":"Differences between LinkedHashMap and TreeMap","index":"1.1"}]}]}